{"version":3,"file":"bundle.js","sources":["../src/app/TwitchConstants.js","../src/app/TwitchApi.js","../src/app/AppUser.js","../src/app/TwitchIRCConnection.js","../src/app/SendIRCConnection.js","../src/app/ReceiveIRCConnection.js","../src/app/BadgeManager.js","../src/app/EmoteManager.js","../src/app/NameColorManager.js","../src/app/FavoritesList.js","../src/app/ChatMessage.js","../src/app/RoomstateMessage.js","../src/app/Chat.js","../src/app/ChatManager.js","../src/app/UserMessage.js","../src/app/MessageParser.js","../src/main.js","../src/app/App.js"],"sourcesContent":["'use strict';\n\n/**\n * Twitch constants like CLIENT_ID and API-URLs\n */\nclass TwitchConstants {\n    /**\n     * @return {string} Client Id for authorization on the Twitch apis\n     * @constructor\n     */\n    static get CLIENT_ID() {\n        return 'xllef7inid2mbeqoaj2o6bsohg7pz7';\n    }\n\n    /**\n     * @return {string} Scope needed for the app (for requesting an access token)\n     * @constructor\n     */\n    static get PERMISSION_SCOPE() {\n        return 'chat_login+user_blocks_edit+user_blocks_read+user_subscriptions';\n    }\n\n    /**\n     * @return {string} URL of the app\n     * @constructor\n     */\n    static get SELF_URL() {\n        return 'http://localhost:5000/';\n    }\n\n    /**\n     * @return {string} URL for getting an access token\n     * @constructor\n     */\n    static get AUTHORIZE_URL() {\n        return `https://api.twitch.tv/kraken/oauth2/authorize?response_type=token&client_id=\n        ${TwitchConstants.CLIENT_ID}&redirect_uri=${TwitchConstants.SELF_URL}&scope=\n        ${TwitchConstants.PERMISSION_SCOPE}`;\n    }\n\n    /**\n     * @return {string} URL of the badges api for getting global badges\n     * @constructor\n     */\n    static get GLOBAL_BADGES_API_URL() {\n        return 'https://badges.twitch.tv/v1/badges/global/display';\n    }\n\n    /**\n     * @return {string} The URL for connecting to the IRC Chat\n     * @constructor\n     */\n    static get WEBSOCKET_URL() {\n        return 'wss://irc-ws.chat.twitch.tv:443';\n    }\n}\n\nexport default TwitchConstants;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Twitch Api calls\n */\nclass TwitchApi {\n    /**\n     * Gets the data to every user in the users parameter\n     * Calls the callback function with the JSON Data when request finished\n     * @param {string} users comma seperated list with usernames\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getUsers(users, context, callback) {\n        $.ajax({\n            context: context,\n            url: ('https://api.twitch.tv/kraken/users?login='\n                + users),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            async: true,\n        }).done(callback);\n    }\n\n    /**\n     * Gets the data to the user the OAuth token is from\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getUserFromOAuth(context, callback) {\n        $.ajax({\n            context: context,\n            url: ('https://api.twitch.tv/kraken'),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n                'Authorization': ('OAuth ' + localStorage.accessToken),\n            },\n            async: false,\n        }).done(callback);\n    }\n\n    /**\n     * Gets the names of all chatters in the specified chat\n     * @param {string} chatName name of the chat\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getChatterList(chatName, context, callback) {\n        $.ajax({\n            context: context,\n            url: ('https://tmi.twitch.tv/group/user/' + chatName\n                + '/chatters'),\n            headers: {'Accept': 'application/vnd.twitchtv.v5+json'},\n            dataType: 'jsonp',\n            async: true,\n        }).done(callback);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets recent messages from the specified chat\n     * @param {string} chatId\n     */\n    static getRecentMessages(chatId) {\n        // Download recent messages\n        $.ajax({\n            url: ('https://tmi.twitch.tv/api/rooms/' + chatId\n                + '/recent_messages?count=50'),\n            headers: {'Accept': 'application/vnd.twitchtv.v5+json'},\n            dataType: 'jsonp',\n            async: true,\n        }).done(function(data) {\n            console.log(data);\n            let recentMessages = data.messages;\n            for (let j = 0; j < recentMessages.length; j++) {\n                //\n            }\n        });\n    }\n}\n\nexport default TwitchApi;\n","/**\n * @param data.token.user_name\n * @param data.token.user_id\n */\n'use strict';\nimport TwitchConstants from './TwitchConstants.js';\nimport TwitchApi from './TwitchApi.js';\n/**\n * Represents the User of the chat client\n */\nclass AppUser {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /** @private */\n        this.userName_ = '';\n        // noinspection JSUnusedGlobalSymbols\n        /** @private */\n        this.userNameLC_ = '';\n        // noinspection JSUnusedGlobalSymbols\n        /** @private */\n        this.userId_ = '';\n\n        this.requestAppUserData();\n    }\n\n    /**\n     * Getter\n     * @return {string} this.userName_\n     */\n    getUserName() {\n        return this.userName_;\n    }\n    /**\n     * Getter\n     * @return {string} this.userId_\n     */\n    getUserId() {\n        return this.userId_;\n    }\n\n    /**\n     * Sends an ajax request to twitch to receive userName_ and userId_ of the AppUser\n     */\n    requestAppUserData() {\n        TwitchApi.getUserFromOAuth(this, function(data) {\n            if (data.token.valid === false) {\n                window.location.replace(TwitchConstants.AUTHORIZE_URL);\n            } else if (typeof(data.token) !== 'undefined') {\n                this.userName_ = data.token.user_name;\n                // noinspection JSUnusedGlobalSymbols\n                this.userNameLC_ = this.userName_.toLowerCase();\n                // noinspection JSUnusedGlobalSymbols\n                this.userId_ = data.token.user_id;\n            } else {\n                alert('Error while getting username');\n            }\n        });\n    }\n}\nexport default AppUser;\n","'use strict';\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Websocket connection to Twitch\n * @abstract\n */\nclass TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        /** @private */\n        this.appUser_ = appUser;\n\n        if (new.target === TwitchIRCConnection) {\n            throw new TypeError('Cannot construct abstract instances ' +\n                'of TwitchIRCConnection directly');\n        }\n\n        this.connection_ = new WebSocket(TwitchConstants.WEBSOCKET_URL);\n        this.connection_.onopen = this.onOpen_.bind(this);\n        this.connection_.onerror = TwitchIRCConnection.onError_.bind(this);\n    }\n\n    /**\n     * Gets called when the connection established\n     * @private\n     */\n    onOpen_() {\n        this.connection_.send('CAP REQ :twitch.tv/membership');\n        this.connection_.send('CAP REQ :twitch.tv/tags');\n        this.connection_.send('CAP REQ :twitch.tv/commands');\n        this.connection_.send('PASS oauth:' + localStorage.accessToken);\n        this.connection_.send('NICK ' + this.appUser_.getUserName());\n    }\n\n    /**\n     * Gets called on error\n     * @private\n     */\n    static onError_() {\n        console.log('WebSocket Error ' + error);\n        alert('ERROR: ' + error);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets called on message\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     * @abstract\n     */\n    onMessage_(event) {};\n\n    /**\n     * Leave the specified chat\n     * @param {string} chatName\n     */\n    leaveChat(chatName) {\n        this.connection_.send('PART #' + chatName);\n    }\n\n    /**\n     * Join the specified chat\n     * @param {string} chatName\n     */\n    joinChat(chatName) {\n        this.connection_.send('JOIN #' + chatName);\n    }\n\n    /**\n     * Sends the specified message to the Websocket connection\n     * @param {string} message\n     */\n    send(message) {\n        this.connection_.send(message);\n    }\n}\n\nexport default TwitchIRCConnection;\n","'use strict';\nimport TwitchIRCConnection from './TwitchIRCConnection.js';\n/**\n * Websocket connection to Twitch for sending\n */\nclass SendIRCConnection extends TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        super(appUser);\n        this.connection_.onmessage = this.onMessage_.bind(this);\n    }\n\n    /**\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     */\n    onMessage_(event) {\n        let messages = event.data.split('\\n');\n\n        for (let i = 0; i < messages.length; i++) {\n            let msg = messages[i];\n\n            if (msg.length <= 1) {\n                continue;\n            }\n\n            if (msg.startsWith('PING :tmi.twitch.tv')) {\n                this.connection_.send('PONG :tmi.twitch.tv');\n            }\n        }\n    }\n}\nexport default SendIRCConnection;\n\n","'use strict';\nimport TwitchIRCConnection from './TwitchIRCConnection.js';\n\n/**\n * Websocket connection to Twitch for receiving\n */\nclass ReceiveIRCConnection extends TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @param {MessageParser} messageParser\n     * @param {ChatManager} chatManager\n     * @constructor\n     */\n    constructor(appUser, messageParser, chatManager) {\n        super(appUser);\n        this.messageParser_ = messageParser;\n        this.chatManager_ = chatManager;\n        this.connection_.onmessage = this.onMessage_.bind(this);\n    }\n\n    /**\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     */\n    onMessage_(event) {\n        let messages = event.data.split('\\n');\n\n        for (let i = 0; i < messages.length; i++) {\n            let msg = messages[i];\n            // console.log(msg);\n            if (msg.startsWith('PING :tmi.twitch.tv')) {\n                this.connection_.send('PONG :tmi.twitch.tv');\n            } else if (msg.length > 1) {\n                let chatMessages = this.messageParser_.parseMessage(msg);\n                // console.log(chatMessages);\n                this.chatManager_.addMessages(chatMessages);\n            } else {\n                // console.log('Received empty message in ReceiveIRVConnection onMessage_()');\n            }\n        }\n    }\n}\n\nexport default ReceiveIRCConnection;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Manages the badges which appear in front of the chat username\n */\nclass BadgeManager {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.badgesChannels_ = {};\n        // noinspection JSUnusedGlobalSymbols\n        this.badgesGlobal_ = null;\n\n        this.downloadGlobalBadges_();\n    }\n\n    /**\n     * @return {Object}\n     */\n    getBadgesChannels() {\n        return this.badgesChannels_;\n    }\n\n    /**\n     * @return {Object}\n     */\n    getBadgesGlobal() {\n        return this.badgesGlobal_;\n    }\n\n    /**\n     * Downloads the JSON information for global badges\n     * @private\n     */\n    downloadGlobalBadges_() {\n        // Download Global Badges JSON\n        $.ajax({\n            context: this,\n            url: (TwitchConstants.GLOBAL_BADGES_API_URL),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            async: true,\n        }).done(function(data) {\n            // noinspection JSUnusedGlobalSymbols\n            this.badgesGlobal_ = data.badge_sets;\n        });\n    }\n\n    /**\n     * @param {string} channelLC\n     * @param {string} channelId\n     */\n    downloadChannelBadges(channelLC, channelId) {\n        // Download Channel Badges\n        $.ajax({\n            context: this,\n            url: ('https://badges.twitch.tv/v1/badges/channels/'\n                + channelId + '/display'),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            async: true,\n        }).done(function(data) {\n            this.badgesChannels_[channelLC] = data.badge_sets;\n        });\n    }\n}\nexport default BadgeManager;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Manages the Emotes for the chat messages and the emote menu\n */\nclass EmoteManager {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        this.appUser_ = appUser;\n\n        this.userEmotes_ = {};\n\n        this.bttvChannels_ = {};\n        this.bttvGlobal_ = {};\n\n        this.ffzChannels_ = {};\n        this.ffzGlobal_ = {};\n\n        this.downloadGlobalEmotes_();\n    }\n\n    /**\n     * @return {Object}\n     */\n    getUserEmotes() {\n        return this.userEmotes_;\n    }\n    /**\n     * @return {Object}\n     */\n    getBttvGlobal() {\n        return this.bttvGlobal_;\n    }\n    /**\n     * @return {Object}\n     */\n    getFfzGlobal() {\n        return this.ffzGlobal_;\n    }\n    /**\n     * @return {Object}\n     */\n    getBttvChannels() {\n        return this.bttvChannels_;\n    }\n    /**\n     * @return {Object}\n     */\n    getFfzChannels() {\n        return this.ffzChannels_;\n    }\n\n    /**\n     * Downloads the global Twitch, BTTV and FFZ Emote JSONs\n     * @private\n     */\n    downloadGlobalEmotes_() {\n        // Gets a list of the emojis and emoticons that the specified\n        // user can use in chat.\n        $.ajax({\n            context: this,\n            url: ('https://api.twitch.tv/kraken/users/' + this.appUser_.getUserId() + '/emotes'),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n                'Authorization': ('OAuth ' + localStorage.accessToken),\n            },\n            async: true,\n        }).done(function(data) {\n            this.userEmotes_ = data.emoticon_sets;\n            console.log(data.emoticon_sets);\n        });\n\n        // Download Global BTTV Emotes JSON\n        $.ajax({\n            context: this,\n            url: ('https://api.betterttv.net/2/emotes'),\n            async: true,\n        }).done(function(data) {\n            this.bttvGlobal_ = data.emotes;\n        });\n\n        // Download Global FFZ Emotes JSON\n        $.ajax({\n            context: this,\n            url: ('https://api.frankerfacez.com/v1/set/global'),\n            async: true,\n        }).done(function(data) {\n            // console.log(data);\n            this.ffzGlobal_ = data;\n        });\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     */\n    downloadChannelEmotes(channelLC) {\n        this.downloadFfzChannelEmotes_(channelLC);\n        this.downloadBttvChannelEmotes_(channelLC);\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     * @private\n     */\n    downloadBttvChannelEmotes_(channelLC) {\n        // Download BTTV Channel Emotes\n        $.ajax({\n            context: this,\n            url: ('https://api.betterttv.net/2/channels/' + channelLC),\n            async: true,\n            dataType: 'json',\n            error: function(xhr) {\n                if (xhr.status === 404) {\n                    // Ignore - No BTTV emotes in this channel\n                    console.log('No BTTV Emotes in Channel: ' + channelLC);\n                }\n            },\n        }).done(function(data) {\n            this.bttvChannels_[channelLC] = data.emotes;\n        });\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     * @private\n     */\n    downloadFfzChannelEmotes_(channelLC) {\n        // Download FFZ Channel Emotes/Moderator Channel Badge\n        $.ajax({\n            context: this,\n            url: ('https://api.frankerfacez.com/v1/room/' + channelLC),\n            async: true,\n            dataType: 'json',\n            error: function(xhr) {\n                if (xhr.status === 404) {\n                    // Ignore - No FFZ emotes in this channel\n                    console.log('No FFZ Emotes in Channel: ' + channelLC);\n                }\n            },\n        }).done(function(data) {\n            this.ffzChannels_[channelLC] = data;\n        });\n    }\n}\nexport default EmoteManager;\n","'use strict';\n\n/**\n * Manages the name color for chatters who never set their name color\n */\nclass NameColorManager {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.userColors_ = {};\n    }\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    getUserColors() {\n        return this.userColors_;\n    }\n\n    /**\n     * @param {string} username\n     * @param {string} color hex #xxxxxx\n     */\n    addUserColor(username, color) {\n        this.userColors_[username] = color;\n    }\n\n    /**\n     * Returns a random color of the Twitch standard name colors\n     * @return {string} Random color as hex #xxxxxx\n     */\n    static randomColor() {\n        let colorChoices = [\n            '#ff0000', '#ff4500',\n            '#ff69b4', '#0000ff',\n            '#2e8b57', '#8a2be2',\n            '#008000', '#daa520',\n            '#00ff7f', '#b22222',\n            '#d2691e', '#ff7f50',\n            '#5f9ea0', '#9acd32',\n            '#1e90ff',\n        ];\n        let randomNumber = Math.floor(Math.random() * colorChoices.length);\n        return colorChoices[randomNumber];\n    }\n\n    /**\n     * Does correct the name color for dark backgrounds, so they are better readable\n     * @param {string} hexColor to be corrected as #xxxxxx hex value\n     * @return {string} corrected color as #xxxxxx hex value\n     */\n    static colorCorrection(hexColor) {\n        // Color contrast correction\n        let rgbColor = NameColorManager.hex2rgb_(hexColor);\n        let yiqColor = NameColorManager.rgb2yiq_(rgbColor.r, rgbColor.g, rgbColor.b);\n        while (hexColor[0] < 0.5) {\n            rgbColor = NameColorManager.yiq2rgb_(yiqColor.y, yiqColor.i, yiqColor.q);\n            let hslColor = NameColorManager.rgb2hsl_(rgbColor.r, rgbColor.g, rgbColor.b);\n            hslColor.l = Math.min(Math.max(0, 0.1 + 0.9 * hslColor.l), 1);\n            rgbColor = NameColorManager.hsl2rgb_(hslColor.h, hslColor.s, hslColor.l);\n            yiqColor = NameColorManager.rgb2yiq_(rgbColor.r, rgbColor.g, rgbColor.b);\n        }\n        rgbColor = NameColorManager.yiq2rgb_(yiqColor.y, yiqColor.i, yiqColor.q);\n        hexColor = NameColorManager.rgb2hex_(rgbColor.r, rgbColor.g, rgbColor.b);\n        return hexColor.substring(0, 7);\n    }\n\n    /**\n     * Converts (r,g,b) to #xxxxxx hex color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {string} color as #xxxxxx hex value\n     * @private\n     */\n    static rgb2hex_(r, g, b) {\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    }\n\n    /**\n     * Converts a #xxxxxx hex color to a rgb color\n     * @param {string} hex color as #xxxxxx hex value\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    static hex2rgb_(hex) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        } : null;\n    }\n\n    /**\n     * Converts a rgb color to a yiq color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {{y: number, i: number, q: number}} y, i and q between 0.0 and 1.0\n     * @private\n     */\n    static rgb2yiq_(r, g, b) {\n        // matrix transform\n        let y = ((0.299 * r) + (0.587 * g) + (0.114 * b)) / 255;\n        let i = ((0.596 * r) + (-0.275 * g) + (-0.321 * b)) / 255;\n        let q = ((0.212 * r) + (-0.523 * g) + (0.311 * b)) / 255;\n        return {\n            y: y,\n            i: i,\n            q: q,\n        };\n    }\n\n    /**\n     * Converts a yiq color to a rgb color\n     * @param {number} y luma 0.0-1.0\n     * @param {number} i first chrominance 0.0-1.0\n     * @param {number} q second chrominance 0.0-1.0\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    static yiq2rgb_(y, i, q) {\n        // matrix transform\n        let r = (y + (0.956 * i) + (0.621 * q)) * 255;\n        let g = (y + (-0.272 * i) + (-0.647 * q)) * 255;\n        let b = (y + (-1.105 * i) + (1.702 * q)) * 255;\n        // bounds-checking\n        if (r < 0) {\n            r = 0;\n        } else if (r > 255) {\n            r = 255;\n        }\n        if (g < 0) {\n            g = 0;\n        } else if (g > 255) {\n            g = 255;\n        }\n        if (b < 0) {\n            b = 0;\n        } else if (b > 255) {\n            b = 255;\n        }\n        return {\n            r: r,\n            g: g,\n            b: b,\n        };\n    }\n\n    /**\n     * Converts a rgb color to a hsl color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {{h: number, s: number, l: number}} h: 0-360, s: 0.0-1.0, l: 0.0-1.0\n     * @private\n     */\n    static rgb2hsl_(r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = (max + min) / 2;\n        let l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0; // achromatic\n        } else {\n            let d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n\n            h /= 6;\n        }\n\n        return {\n            h: h*360,\n            s: s,\n            l: l,\n        };\n    }\n\n    /**\n     * Converts an hsl color to a rgb color\n     * @param {number} h hue 0-360\n     * @param {number} s saturation 0.0-1.0\n     * @param {number} l lightness 0.0-1.0\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    static hsl2rgb_(h, s, l) {\n        // based on algorithm from http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n        if ( h === undefined ) {\n            return {\n                r: 0,\n                g: 0,\n                b: 0,\n            };\n        }\n\n        let chroma = (1 - Math.abs((2 * l) - 1)) * s;\n        let huePrime = h / 60;\n        let secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n        huePrime = Math.floor(huePrime);\n        let red;\n        let green;\n        let blue;\n\n        if ( huePrime === 0 ) {\n            red = chroma;\n            green = secondComponent;\n            blue = 0;\n        } else if ( huePrime === 1 ) {\n            red = secondComponent;\n            green = chroma;\n            blue = 0;\n        } else if ( huePrime === 2 ) {\n            red = 0;\n            green = chroma;\n            blue = secondComponent;\n        } else if ( huePrime === 3 ) {\n            red = 0;\n            green = secondComponent;\n            blue = chroma;\n        } else if ( huePrime === 4 ) {\n            red = secondComponent;\n            green = 0;\n            blue = chroma;\n        } else if ( huePrime === 5 ) {\n            red = chroma;\n            green = 0;\n            blue = secondComponent;\n        }\n\n        let lightnessAdjustment = l - (chroma / 2);\n        red += lightnessAdjustment;\n        green += lightnessAdjustment;\n        blue += lightnessAdjustment;\n\n        return {\n            r: Math.round(red * 255),\n            g: Math.round(green * 255),\n            b: Math.round(blue * 255),\n        };\n    }\n}\nexport default NameColorManager;\n","'use strict';\n\n/**\n * @param data._total\n * @param data.users._id\n */\n\nimport TwitchApi from './TwitchApi.js';\n\n/**\n * List of favorite Twitch channels\n */\nclass FavoritesList {\n    /**\n     * @param {BadgeManager} badgeManager\n     * @param {EmoteManager} emoteManager\n     * @param {ChatManager} chatManager\n     * @constructor\n     */\n    constructor(badgeManager, emoteManager, chatManager) {\n        this.isVisible_ = true;\n        this.badgeManager_ = badgeManager;\n        this.emoteManager_ = emoteManager;\n        this.chatManager_ = chatManager;\n\n        $('#addFavFromInput').click(this.addFavToList.bind(this));\n        $('#newFavInput').keydown(function(event) {\n            if (event.keyCode === 13) {\n                $('#addFavFromInput').click();\n            }\n        });\n        document.getElementById('channelListToggle').addEventListener('click', this.toggleFavList);\n        this.loadFavoritesFromLocalStorage_();\n    }\n\n    /**\n     * @private\n     */\n    loadFavoritesFromLocalStorage_() {\n        try {\n            let channelsArray = JSON.parse(localStorage.getItem('channels'));\n            if (channelsArray !== null) {\n                let channelCount = 0;\n                let channels = '';\n                for (let i = 0; i < channelsArray.length; i++) {\n                    channels += channelsArray[i] + ',';\n                    channelCount++;\n                    if (channelCount > 99) {\n                        channels = channels.slice(0, -1);\n                        this.addFavToList(channels);\n                        channels = '';\n                        channelCount = 0;\n                    }\n                }\n                if (channels.length > 1) {\n                    channels = channels.slice(0, -1);\n                    this.addFavToList(channels);\n                }\n            } else {\n                let channels = [];\n                localStorage.setItem('channels', JSON.stringify(channels));\n            }\n        } catch (err) {\n            alert('Error: ' + err);\n            let channels = [];\n            localStorage.setItem('channels', JSON.stringify(channels));\n        }\n    }\n\n    /**\n     * If the favorites list is enabled, disable it.\n     * If its disabled, enable it.\n     */\n    toggleFavList() {\n        this.isVisible_ = !this.isVisible_;\n        if (!this.isVisible_) {\n            document.getElementById('fav-channel-list').style.display\n                = 'inline-block';\n            $('.container').css({'width': 'calc(100% - 250px)'});\n            document.getElementById('channelListToggle').style.backgroundImage\n                = 'url(./img/arrow_down.svg)';\n        } else {\n            document.getElementById('fav-channel-list').style.display = 'none';\n            $('.container').css({'width': '100%'});\n            document.getElementById('channelListToggle').style.backgroundImage\n                = 'url(./img/arrow_up.svg)';\n        }\n    }\n\n    /**\n     * Add a channel to the list of favorites\n     *\n     * @param {string} channelLC channel name or null\n     */\n    addFavToList(channelLC) {\n        let channels = document.getElementById('newFavInput').value;\n        if ($.type(channelLC) === 'string') {\n            channels = channelLC;\n        }\n        // console.log(channels);\n        channels = channels.replace(/\\s+/g, '');\n        let channelsCount = channels.split(',').length;\n\n        if (channels.length >= 3) {\n            // console.log(this);\n            TwitchApi.getUsers(channels, this, function(data) {\n                let notExistingChannelsCount = channelsCount - data._total;\n                for (let i = 0; i < data._total; i++) {\n                    let channel = data.users[i].display_name;\n                    let channelId = data.users[i]._id;\n                    let profilePicURL = data.users[i].logo;\n                    // ToDo: Check if next line is necessary\n                    document.getElementById('newFavInput').placeholder = '';\n                    // noinspection JSPotentiallyInvalidUsageOfClassThis\n                    this.addFavLine_(channel, profilePicURL, channelId);\n                }\n\n                if (notExistingChannelsCount > 0) {\n                    // noinspection JSPotentiallyInvalidUsageOfClassThis\n                    this.showChannelDoesNotExistInfo_(notExistingChannelsCount);\n                }\n            });\n        }\n    }\n\n    /**\n     * @param {number} notExistingChannelsCount\n     * @private\n     */\n    showChannelDoesNotExistInfo_(notExistingChannelsCount) {\n        document.getElementById('newFavInput').value = '';\n        $('#newFavInput').queue(function(next) {\n            let info = (notExistingChannelsCount > 1) ? ' Channels do not exist.' :\n                ' Channel does not exist.';\n            $(this).attr('placeholder', notExistingChannelsCount + info);\n            next();\n        }).delay(5000).queue(function(next) {\n            $(this).attr('placeholder', '');\n            next();\n        });\n    }\n\n    /**\n     * @param {string} channel channel name\n     * @param {string} profilePicURL URL to profile image file\n     * @param {string} channelId channel id\n     */\n    addFavLine_(channel, profilePicURL, channelId) {\n        let channelLC = channel.toLowerCase();\n\n        this.badgeManager_.downloadChannelBadges(channelLC, channelId);\n        this.emoteManager_.downloadChannelEmotes(channelLC);\n\n\n        if (channel.length > 0\n            && $('.favEntry[id$=\\'' + channelLC + '\\']').length === 0) {\n            document.getElementById('newFavInput').value = '';\n\n            let favList = $('#fav-channel-list');\n\n            favList.append('<div class=\"favEntry\" id=\"' + channelLC\n                + '\"><img class=\"profilePic\" src=\"' + ((profilePicURL != null)\n                    ? profilePicURL : '/img/defaultProfile.png')\n                + '\" /><input class=\"favEntryAddChatButton\" ' +\n                'id=\"' + channelLC + '\" type=\"button\" value=\"' + channel\n                + '\"><input class=\"favEntryRemoveButton\" ' +\n                'id=\"' + channelLC + '\" type=\"button\" ></div>');\n\n            $(document).on('click', '.favEntryAddChatButton[id$=\\''\n                + channelLC + '\\']', this, function(event) {\n                event.data.chatManager_.addChat(channel);\n            });\n\n            $(document).on('click', '.favEntryRemoveButton[id$=\\'' + channelLC + '\\']', this,\n                function(event) {\n                    $(this).parent().remove();\n                    event.data.removeChannelFromLocalStorage_(channelLC);\n            });\n\n            // ToDo: is it needed to do channelList.sortable() every time when an entry is added?\n            favList.sortable({\n                axis: 'y',\n                animation: 300,\n                cursor: 'move',\n                revert: 200,\n                scroll: true,\n                containment: 'parent',\n            });\n        }\n\n        this.storeChannelInLocalStorage_(channelLC);\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * @param {string} channelName Twitch channel id of the channel that is stored\n     * @private\n     */\n    storeChannelInLocalStorage_(channelName) {\n        let channels = JSON.parse(localStorage.getItem('channels'));\n        let index = channels.indexOf(channelName);\n        if (index > -1) {\n            channels.splice(index, 1);\n        }\n        channels.push(channelName);\n        localStorage.setItem('channels', JSON.stringify(channels));\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * @param {string} channelLC Twitch channel id of the channel that gets deleted\n     * @private\n     */\n    removeChannelFromLocalStorage_(channelLC) {\n        let channels = JSON.parse(localStorage.getItem('channels'));\n        let index = channels.indexOf(channelLC);\n        if (index > -1) {\n            channels.splice(index, 1);\n        }\n        localStorage.setItem('channels', JSON.stringify(channels));\n    }\n}\n\nexport default FavoritesList;\n","'use strict';\n\n/**\n * Represents one chat message\n */\nclass ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @constructor\n     */\n    constructor(chatName, content) {\n        this.chatName_ = chatName;\n        /** @private */\n        this.timestamp_ = this.getCurrentTimeFormatted_();\n        /** @private */\n        this.content_ = content.trim();\n        /** @private */\n    }\n\n    /**\n     * @return {string}\n     */\n    getContent() {\n        return this.content_;\n    }\n    /**\n     * @return {string}\n     */\n    getTimestamp() {\n        return this.timestamp_;\n    }\n    /**\n     * @return {string}\n     */\n    getChatName() {\n        return this.chatName_;\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * Returns the current time in 24h format\n     * @return {string} time in format HH:MM\n     * @private\n     */\n    getCurrentTimeFormatted_() {\n        let currentDate = new Date();\n        let time;\n        if (currentDate.getHours() >= 10 && currentDate.getMinutes() >= 10) {\n            time = currentDate.getHours() + ':' + currentDate.getMinutes();\n        } else if (currentDate.getHours() < 10 && currentDate.getMinutes() >= 10) {\n            time = '0' + currentDate.getHours() + ':' + currentDate.getMinutes();\n        } else if (currentDate.getHours() >= 10 && currentDate.getMinutes() < 10) {\n            time = currentDate.getHours() + ':0' + currentDate.getMinutes();\n        } else {\n            time = '0' + currentDate.getHours() + ':0' + currentDate.getMinutes();\n        }\n        return time;\n    }\n    /**\n     * @return {string} HTML Code\n     */\n    getHtml() {\n        return '<li style=\"border-top: 1px solid #673ab7;' +\n            'border-bottom: 1px solid #673ab7;padding-top: 3px; ' +\n            'padding-bottom: 3px;\"><span style=\"color: gray;' +\n            'font-size: 11px;\">' + this.timestamp_ + '</span>  ' +\n            this.content_\n            + '</li>';\n    }\n}\n\nexport default ChatMessage;\n","'use strict';\nimport ChatMessage from './ChatMessage.js';\n\n/**\n * Represents one roomstate message\n */\nclass RoomstateMessage extends ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @constructor\n     */\n    constructor(chatName, content) {\n        super(chatName, content);\n    }\n\n    /**\n     * @return {string} HTML Code\n     */\n    getHtml() {\n        return '<p style=\"color: gray; font-size: 11px;' +\n            'padding-left: 10px;font-weight: 200;\">' + this.getContent() + '</p>';\n    }\n}\nexport default RoomstateMessage;\n","import TwitchApi from './TwitchApi.js';\nimport RoomstateMessage from './RoomstateMessage.js';\n\n/**\n * Represents one chat column on the app\n */\nclass Chat {\n    /**\n     * Adds the chat column for channelName to the app\n     *\n     * @param {string} channelName Name of the channel\n     * @param {EmoteManager} emoteManager\n     * @param {ReceiveIRCConnection} receiveIrcConnection\n     * @param {SendIRCConnection} sendIrcConnection\n     */\n    constructor(channelName, emoteManager, receiveIrcConnection, sendIrcConnection) {\n        console.log('Send connection 1: ' + sendIrcConnection);\n        /** @private */\n        this.channelName_ = channelName;\n        /** @private */\n        this.channelNameLC_ = channelName.toLowerCase();\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.receiveIrcConnection_ = receiveIrcConnection;\n        /** @private */\n        this.sendIrcConnection_ = sendIrcConnection;\n        console.log('Send connection 2: ' + this.sendIrcConnection_);\n        /** @private */\n        this.messageCount_ = 0;\n        /** @private */\n        this.containerCount_ = 0;\n        /** @private\n         *  @const */\n        this.MESSAGE_LIMIT_ = 200000;\n        /** @private\n         *  @const */\n        this.MESSAGES_IN_CONTAINER_ = 100;\n    }\n\n    /**\n     * @param {Object.<ChatMessage>} chatMessage\n     */\n    addMessage(chatMessage) {\n        if (chatMessage instanceof RoomstateMessage) {\n            let chatInput = $('.chatInput#' + chatMessage.getChatName().toLowerCase());\n            chatInput.append(chatMessage.getHtml());\n        } else {\n            let chatMessageList = $('#' + this.channelName_.toLowerCase() + 'contentArea');\n\n            if (chatMessageList.children('div').length === 0 ||\n                (chatMessageList.children('div').length !== 0 &&\n                    chatMessageList.children('div:last')\n                        .children('li').length >= this.MESSAGES_IN_CONTAINER_)) {\n                chatMessageList.append('<div></div>');\n                this.containerCount_++;\n            }\n            chatMessageList.children('div:last').append(chatMessage.getHtml());\n            this.messageCount_++;\n            this.limitMessages_();\n            this.hideNotVisibleMessages();\n            this.correctScrollPosition_();\n        }\n    }\n\n    /**\n     * Checks whether there are more than this.MESSAGE_LIMIT_ messages in chat.\n     * If yes than remove the first div with messages\n     * @private\n     */\n    limitMessages_() {\n        if (this.messageCount_ >= this.MESSAGE_LIMIT_) {\n            $('#' + this.channelName_ + ' .chatContent .chatMessageList div:first').remove();\n            // noinspection JSUnusedGlobalSymbols\n            this.messageCount_ -= this.MESSAGES_IN_CONTAINER_;\n            this.containerCount_--;\n        }\n    }\n\n    /**\n     * When chat is scrolled to bottom, this hides all message containers except the last 3\n     */\n    hideNotVisibleMessages() {\n        // Hide all divs with 100 messages each which are not the last 3 to improve performance\n        if (this.containerCount_ > 3 && this.isScrolledToBottom()) {\n            let chatMessageList = $('#' + this.channelName_ + 'contentArea');\n            chatMessageList.children('div:visible').slice(0, -3).hide();\n        }\n    }\n\n    /**\n     * Checks if the Chat is scrolled to the bottom\n     * @return {boolean} True if on bottom, false if not\n     */\n    isScrolledToBottom() {\n        let bottom = false;\n        let chatContent = $('#' + this.channelNameLC_ + 'scrollArea');\n        if (chatContent[0].scrollHeight - chatContent.scrollTop()\n            < chatContent.outerHeight() + 50) bottom = true;\n        return bottom;\n    }\n\n    /**\n     * @private\n     */\n    correctScrollPosition_() {\n        // Scroll to bottom\n        let bottom = this.isScrolledToBottom();\n        let chatContent = $('#' + this.channelNameLC_ + 'scrollArea');\n        if (bottom) {\n            let contentHeight = chatContent[0].scrollHeight;\n            chatContent.scrollTop(contentHeight + 50);\n            // chatContent.stop(true, false).delay(50)\n            // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n            $('#' + this.channelNameLC_ + ' .chatContent .chatMessageList')\n                .find('p:last').imagesLoaded(function() {\n                setTimeout(function() {\n                    contentHeight = chatContent[0].scrollHeight;\n                    chatContent.scrollTop(contentHeight + 50);\n                    // chatContent.stop(true, false).delay(50)\n                    // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n                    // alert(\"wub\");\n                }, 50);\n            });\n        } else if (!bottom\n            && $('#' + this.channelNameLC_ + ' .chatNewMessagesInfo').is(':hidden')) {\n            let contentHeight = chatContent[0].scrollHeight;\n            chatContent.scrollTop(contentHeight + 50);\n            // chatContent.stop(true, false).delay(50)\n            // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n        }\n    }\n\n    /**\n     * @return {string} HTML Code for the chat\n     */\n    getHtml() {\n        let channelLC = this.channelName_.toLowerCase();\n        return '<div class=\"chat\" id=\"' + channelLC + '\">' +\n            '<div class=\"chatHeader\" id=\"' + channelLC + '\">' +\n            '<button class=\"toggleViewerlist\" id=\"' + channelLC + '\"></button>' +\n            '<span>' + this.channelName_ + '</span>' +\n            '<button class=\"removeChat\" id=\"' + channelLC + '\"></button>' +\n            '<button class=\"toggleStream\" id=\"' + channelLC + '\"></button>' +\n            '</div>' +\n            '<div class=\"chatContent\" id=\"' + channelLC + 'scrollArea\">' +\n            '<div class=\"chatMessageList\" id=\"' + channelLC + 'contentArea\">' +\n            '</div></div>' +\n            '<div class=\"chatInput\" id=\"' + channelLC + '\">' +\n            '<div class=\"chatNewMessagesInfo\" id=\"' + channelLC + '\">' +\n            'More messages below.</div>' +\n            '<img class=\"kappa\" src=\"/img/Kappa.png\" />' +\n            '<textarea maxlength=\"500\" class=\"chatInputField\" id=\"'\n            + channelLC +\n            '\" placeholder=\"Send a message...\"></textarea>' +\n            '<div class=\"emoteMenu\">' +\n            '<div class=\"emotes\">' +\n            '<div class=\"bttvEmotes\" style=\"width: 100%;\">' +\n            '<h3>BTTV Emotes</h3></div>' +\n            '<div class=\"bttvChannelEmotes\" style=\"width: 100%;\">' +\n            '<h3>BTTV Channel Emotes</h3></div>' +\n            '<div class=\"ffzEmotes\" style=\"width: 100%;\">' +\n            '<h3>FFZ Emotes</h3></div>' +\n            '<div class=\"ffzChannelEmotes\" style=\"width: 100%;\">' +\n            '<h3>FFZ Channel Emotes</h3></div>' +\n            '</div></div></div>'\n            + '<div class=\"chatViewerlist\" id=\"' + channelLC + '\"></div>';\n    }\n\n    /**\n     * Adds all abilities to the Chat (Button actions etc.)\n     */\n    addAbilities() {\n        this.addEmotesToEmoteMenu_();\n        this.addEmoteMenuImgClickAbility_();\n        this.addEmoteMenuGroupClickAbility_();\n        this.addEmoteMenuToggleAbility_();\n        this.addEmoteMenuDraggableAbility_();\n        this.addEmoteMenuResizableAbility_();\n        this.addStreamIframeAbility_();\n        this.addResizeAbility_();\n        this.addChatterListAbility_();\n        this.addSendMessagesAbility_();\n        this.addNewMessageInfoAbility_();\n    }\n    /**\n     * @private\n     */\n    addEmotesToEmoteMenu_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let userEmotes = this.emoteManager_.getUserEmotes();\n        // Twitch Global/Channel\n        for (let j in userEmotes) {\n            if ({}.hasOwnProperty.call(userEmotes, j)) {\n                let emoteSet = userEmotes[j];\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .emotes')\n                    .prepend('<div class=\"' + j + '\" style=\"width: 100%;\">' +\n                        '<h3>' + j + '</h3></div>');\n                for (let k in emoteSet) {\n                    if ({}.hasOwnProperty.call(emoteSet, k)) {\n                        $('.chatInput[id$=\\'' + channelLC\n                            + '\\'] .emoteMenu .emotes .' + j)\n                            .append('<img ' +\n                                'src=\\'https://static-cdn.jtvnw.net/emoticons/v1/'\n                                + emoteSet[k].id + '/1.0\\' alt=\\''\n                                + emoteSet[k].code + '\\' />');\n                    }\n                }\n            }\n        }\n        // BTTV Global\n        let bttvGlobal = this.emoteManager_.getBttvGlobal();\n        for (let i = 0; i < bttvGlobal.length; i++) {\n            if (bttvGlobal[i].channel == null) {\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .bttvEmotes')\n                    .append('<img src=\"https://cdn.betterttv.net/emote/'\n                        + bttvGlobal[i].id + '/1x\" alt=\"' + bttvGlobal[i].code\n                        + '\" />');\n            }\n        }\n        // FFZ Global\n        let ffzGlobal = this.emoteManager_.getFfzGlobal();\n        for (let j = 0; j < ffzGlobal.default_sets.length; j++) {\n            let emoteSetGlobal = ffzGlobal.default_sets[j];\n            let emotesInSetGlobal = ffzGlobal['sets'][emoteSetGlobal]['emoticons'];\n            for (let k = 0; k < emotesInSetGlobal.length; k++) {\n                // let ffzEmoteName = JSON.stringify(emotesInSetGlobal[k].name);\n\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .ffzEmotes')\n                    .append('<img src=\\'https:' +\n                        emotesInSetGlobal[k]['urls']['1'] + '\\' ' +\n                        'alt=\\'' + emotesInSetGlobal[k].name + '\\' />');\n            }\n        }\n        // BTTV Channel\n        let bttvChannels = this.emoteManager_.getBttvChannels();\n        if (bttvChannels.hasOwnProperty(channelLC)) {\n            for (let j = 0; j < bttvChannels[channelLC].length; j++) {\n                /* let bttvChannelEmote =\n                    JSON.stringify(bttvChannels[channelLC][j].code);*/\n\n                let emoteId = JSON.stringify(bttvChannels[channelLC][j].id)\n                    .substring(1,\n                        JSON.stringify(bttvChannels[channelLC][j].id).length - 1);\n                $('.chatInput[id$=\\'' + channelLC\n                    + '\\'] .emoteMenu .bttvChannelEmotes')\n                    .append('<img src=\\'https://cdn.betterttv.net/emote/' +\n                        emoteId +\n                        '/1x\\' alt=\\'' + bttvChannels[channelLC][j].code + '\\' />');\n            }\n        }\n        // FFZ Channel\n        let ffzChannels = this.emoteManager_.getFfzChannels();\n        if (ffzChannels.hasOwnProperty(channelLC)) {\n            let ffzChannelId = ffzChannels[channelLC]['room']['_id'];\n            if (ffzChannels[channelLC]['sets'][ffzChannelId] != null) {\n                let ffzChannelEmoteSet =\n                    ffzChannels[channelLC]['sets'][ffzChannelId]['emoticons'];\n                for (let j = 0; j < ffzChannelEmoteSet.length; j++) {\n                    /* let ffzChannelEmote =\n                        JSON.stringify(ffzChannelEmoteSet[j].name);*/\n\n                    $('.chatInput[id$=\\'' + channelLC\n                        + '\\'] .emoteMenu .ffzChannelEmotes')\n                        .append('<img src=\\'https:' +\n                            ffzChannelEmoteSet[j]['urls']['1'] + '\\' ' +\n                            'alt=\\'' + ffzChannelEmoteSet[j].name + '\\' />');\n                }\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    addEmoteMenuImgClickAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu img').click(function() {\n            let emoteName = $(this).attr('alt');\n            let inputField = $('.chatInputField[id$=\\'' + channelLC + '\\']');\n            let curValue = inputField.val();\n            let newValue;\n            if (!curValue.endsWith(' ') && curValue.length > 0) {\n                newValue = curValue + ' ' + emoteName + ' ';\n            } else {\n                newValue = curValue + emoteName + ' ';\n            }\n            inputField.val(newValue);\n        });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuGroupClickAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .emotes h3')\n            .click(/* @this HTMLElement */function() {\n                if ($(this).parent().css('height') === '18px') {\n                    $(this).parent().css({'height': ''});\n                } else {\n                    $(this).parent().css({'height': '18px'});\n                }\n            });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuToggleAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .kappa').click(function() {\n            if ($emoteMenu.is(':hidden')) {\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu').show();\n            } else {\n                $emoteMenu.hide();\n                $emoteMenu.css({\n                    'top': '',\n                    'left': '',\n                    'right': '',\n                    'bottom': '',\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuDraggableAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        let chatArea = $('#main-chat-area');\n        $emoteMenu.draggable({\n            containment: chatArea,\n        });\n    }\n    /**\n     * @private\n     */\n    addEmoteMenuResizableAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        $emoteMenu.resizable({\n            handles: 'n, ne, e',\n            minHeight: 200,\n            minWidth: 200,\n        });\n    }\n    /**\n     * @private\n     */\n    addStreamIframeAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $(document).on('click', '.toggleStream[id$=\\'' + channelLC + '\\']',\n            /* @this HTMLElement */function() {\n                if ($(this).parent().parent().find('.chatStream').length) {\n                    $(this).parent().parent().find('.chatStream').remove();\n                    $(this).parent().parent().find('.chatContent')\n                        .css({'height': 'calc(100% - 105px)'});\n                    $(this).parent().parent().find('.chatViewerlist')\n                        .css({'height': 'calc(100% - 35px)'});\n                } else {\n                    $(this).parent().parent().prepend(\n                        '<div class=\"chatStream\" id=\"' + channelLC + '\">' +\n                        '<div class=\"chatStreamInner\">' +\n                        '<iframe src=\"https://player.twitch.tv/?channel=' + channelLC\n                        + '\" frameborder=\"0\" allowfullscreen=\"true\"' +\n                        ' scrolling=\"no\" height=\"100%\" width=\"100%\"></iframe>' +\n                        '</div></div>');\n                    $(this).parent().parent().find('.chatContent')\n                        .css({\n                            'height': 'calc(100% - 105px - ' +\n                            $(this).parent().parent()\n                                .find('.chatStream').outerHeight() + 'px )',\n                        });\n                    $(this).parent().parent().find('.chatViewerlist')\n                        .css({\n                            'height': 'calc(100% - 35px - ' +\n                            $(this).parent().parent()\n                                .find('.chatStream').outerHeight() + 'px )',\n                        });\n                }\n            });\n    }\n    /**\n     * @private\n     */\n    addResizeAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $(document).on('resize', '.chat[id$=\\'' + channelLC + '\\']', function() {\n            $(this).find('.chatContent')\n                .css({\n                    'height': 'calc(100% - 105px - ' + $(this)\n                        .find('.chatStream').outerHeight() + 'px )',\n                });\n            $(this).find('.chatViewerlist')\n                .css({\n                    'height': 'calc(100% - 35px - ' + $(this)\n                        .find('.chatStream').outerHeight() + 'px )',\n                });\n        });\n        $('.chat[id$=\\'' + channelLC + '\\']').resizable({\n            handles: 'e',\n            start: function() {\n                $('iframe').css('pointer-events', 'none');\n            },\n            stop: function() {\n                $('iframe').css('pointer-events', 'auto');\n            },\n        });\n        let contentHeightOld =\n            $('.chatContent[id$=\\'' + channelLC + 'scrollArea\\'] .chatMessageList').height();\n        $('.chat[id$=\\'' + channelLC).resize(function() {\n            let $newMessagesInfo = $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']');\n            let $chatContent = $('#' + channelLC + ' .chatContent');\n            let $chatContentArea = $('.chatContent[id$=\\'' + channelLC + 'contentArea\\']');\n            if ($newMessagesInfo.is(':hidden') && contentHeightOld <= $chatContentArea.height()) {\n                $chatContent.scrollTop($chatContent[0].scrollHeight + 50);\n                contentHeightOld = $chatContentArea.height();\n            }\n            if ($newMessagesInfo.is(':hidden')) {\n                $chatContent.scrollTop($chatContent[0].scrollHeight + 50);\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    addChatterListAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let toggleVL = 0;\n        $(document).on('click', '.toggleViewerlist[id$=\\'' + channelLC + '\\']', function() {\n            // if ($(this).parent().parent().find(\"div.chatViewerlist\")\n            // .css(\"display\").toLowerCase() != \"none\") {\n            if (toggleVL % 2 !== 0) {\n                $(this).parent().parent().find('div.chatViewerlist').hide();\n                $(this).parent().parent().find('div.chatContent').show();\n                $(this).parent().parent().find('div.chatInput').show();\n            } else {\n                $(this).parent().parent().find('div.chatContent').hide();\n                $(this).parent().parent().find('div.chatInput').hide();\n                $(this).parent().parent().find('div.chatViewerlist').show();\n\n                let viewerlist =\n                    $(this).parent().parent().find('div.chatViewerlist');\n\n                TwitchApi.getChatterList(channelLC, this, function(data) {\n                    viewerlist.empty();\n                    data = data.data;\n                    viewerlist.append('Chatter Count: ' + data.chatter_count +\n                        '<br /><br />');\n\n                    let chatters = data.chatters;\n                    if (chatters.moderators.length > 0) {\n                        viewerlist.append('<h3>Moderators</h3>');\n                        let modList = '<ul>';\n                        for (let i = 0; i < chatters.moderators.length; i++) {\n                            modList += '<li>' + chatters.moderators[i] + '</li>';\n                        }\n                        modList += '</ul><br />';\n                        viewerlist.append(modList);\n                    }\n                    if (chatters.staff.length > 0) {\n                        viewerlist.append('<h3>Staff</h3>');\n                        let staffList = '<ul>';\n                        for (let i = 0; i < chatters.staff.length; i++) {\n                            staffList += '<li>' + chatters.staff[i] + '</li>';\n                        }\n                        staffList += '</ul><br />';\n                        viewerlist.append(staffList);\n                    }\n                    if (chatters.admins.length > 0) {\n                        viewerlist.append('<h3>Admins</h3>');\n                        let adminsList = '<ul>';\n                        for (let i = 0; i < chatters.admins.length; i++) {\n                            adminsList += '<li>' + chatters.admins[i] + '</li>';\n                        }\n                        adminsList += '</ul><br />';\n                        viewerlist.append(adminsList);\n                    }\n                    if (chatters.global_mods.length > 0) {\n                        viewerlist.append('<h3>Global Mods</h3>');\n                        let globalModsList = '<ul>';\n                        for (let i = 0; i < chatters.global_mods.length; i++) {\n                            globalModsList +=\n                                '<li>' + chatters.global_mods[i] + '</li>';\n                        }\n                        globalModsList += '</ul><br />';\n                        viewerlist.append(globalModsList);\n                    }\n                    if (chatters.viewers.length > 0) {\n                        viewerlist.append('<h3>Viewers</h3>');\n                        let viewersList = '<ul>';\n                        for (let i = 0; i < chatters.viewers.length; i++) {\n                            viewersList += '<li>' + chatters.viewers[i] + '</li>';\n                        }\n                        viewersList += '</ul><br />';\n                        viewerlist.append(viewersList);\n                    }\n                });\n            }\n            toggleVL++;\n        });\n    }\n    /**\n     * @private\n     */\n    addSendMessagesAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInputField[id$=\\'' + channelLC + '\\']').keydown(this, function(event) {\n            if (event.keyCode === 13) {\n                event.preventDefault();\n                if ($(this).val().startsWith('.')\n                    || $(this).val().startsWith('/')) {\n                    event.data.receiveIrcConnection_.send('PRIVMSG #' + channelLC + ' :'\n                        + $(this).val());\n                } else {\n                    event.data.sendIrcConnection_.send('PRIVMSG #' + channelLC\n                        + ' :' + $(this).val());\n                }\n                $(this).val('');\n            } else if (event.keyCode === 9) {\n                event.preventDefault();\n                if ($(this).val().length !== 0 && !$(this).val().endsWith(' ')) {\n                    console.log('WUB');\n                }\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    addNewMessageInfoAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').click(function() {\n            $(this).hide();\n            let $chatContent = $('#' + channelLC + ' .chatContent');\n            $chatContent.scrollTop($chatContent[0].scrollHeight);\n        });\n        $('.chatContent[id$=\\'' + channelLC + 'scrollArea\\']').scroll(\n            /* @this HTMLElement */function() {\n                // Bug workaround: unexpected horizontal scrolling\n                // despite overflow-x: hidden\n                if ($(this).scrollLeft() !== 0) {\n                    $(this).scrollLeft(0);\n                }\n                // New messages info scroll behavior\n                if ($(this)[0].scrollHeight - $(this).scrollTop()\n                    < $(this).outerHeight() + 50) {\n                    $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').hide();\n                } else {\n                    $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').show();\n                }\n\n                if ($(this).scrollTop() < 200) {\n                    $('.chatContent[id$=\\'' + channelLC\n                        + 'scrollArea\\'] .chatMessageList')\n                        .children('div:hidden:last').show();\n                }\n            });\n    }\n}\n\nexport default Chat;\n","'use strict';\nimport Chat from './Chat.js';\n\n/**\n * Represents the whole application\n */\nclass ChatManager {\n    /**\n     * Creates the ChatManager\n     * @param {EmoteManager} emoteManager\n     */\n    constructor(emoteManager) {\n        /**\n         * @private\n         * @type {Object.<string, Chat>}\n         */\n        this.chatList_ = {};\n        this.emoteManager_ = emoteManager;\n\n        // Bug workaround: unexpected vertical scrolling\n        // despite overflow-y: hidden\n        $('#main-chat-area').scroll(function() {\n            if ($(this).scrollTop() !== 0) {\n                $(this).scrollTop(0);\n            }\n        });\n    }\n\n    setReceiveIrcConnection(receiveIrcConnection) {\n        this.receiveIrcConnection_= receiveIrcConnection;\n    }\n    setSendIrcConnection(sendIrcConnection) {\n        this.sendIrcConnection_ = sendIrcConnection;\n    }\n\n    /**\n     * Adds the chat messages to the correct chat\n     * @param {Array.<ChatMessage>} chatMessages\n     */\n    addMessages(chatMessages) {\n        for (let i = 0; i < chatMessages.length; i++) {\n            let chatName = chatMessages[i].getChatName().toLowerCase();\n            this.chatList_[chatName].addMessage(chatMessages[i]);\n        }\n    }\n\n    /**\n     * @param {string} channelName\n     * @return {boolean} true if chat already in the chatList\n     */\n    isChatAlreadyAdded(channelName) {\n        return this.chatList_.hasOwnProperty(channelName);\n    }\n\n    /**\n     * Removes the Chat from the chatList_ and the DOM\n     *\n     * @param {string} channelName Name of the channel that will be removed\n     * @private\n     */\n    removeChat_(channelName) {\n        delete this.chatList_[channelName];\n\n        $(document).off('click', '.toggleStream[id$=\\'' + channelName + '\\']');\n        $(this).parent().parent().remove();\n        this.receiveIrcConnection_.leaveChat(channelName);\n        this.sendIrcConnection_.leaveChat(channelName);\n    }\n\n    /**\n     * Creates new Chat and adds it to the chatList_ if there is not already\n     * a chat with this channelName\n     * @param {string} channelName Name of the channel that will be added\n     */\n    addChat(channelName) { // ToDo: Restructure this method\n        let channelLC = channelName.toLowerCase();\n        if (!this.isChatAlreadyAdded(channelLC)) {\n            this.chatList_[channelLC] = new Chat(channelName, this.emoteManager_,\n                this.receiveIrcConnection_, this.sendIrcConnection_);\n            let chatArea = $('#main-chat-area');\n            chatArea.append(this.chatList_[channelLC].getHtml());\n            this.chatList_[channelLC].addAbilities();\n\n            this.receiveIrcConnection_.joinChat(channelLC);\n            this.sendIrcConnection_.joinChat(channelLC);\n\n            /* $(document).on('click', '.removeChat[id$=\\'' + channelLC + '\\']',\n                this.removeChat_(channelName)); */\n\n            $(document).find('.removeChat#' + channelLC).on('click', this.removeChat_(channelName));\n\n            // ToDO: Check if .sortable is needed every time\n            chatArea.sortable({\n                handle: '.chatHeader',\n                start(event, ui) {\n                    ui.placeholder.width(ui.item.width());\n                    ui.placeholder.height(ui.item.height());\n                },\n                animation: 300,\n                cursor: 'move',\n                revert: 200,\n                scroll: true,\n                containment: 'parent',\n            });\n        }\n    }\n}\n\nexport default ChatManager;\n","'use strict';\nimport ChatMessage from './ChatMessage.js';\n/**\n * Represents one chat message of a chat user\n */\nclass UserMessage extends ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @param {array} badges List of badges shown in front of the name\n     * @param {Array.<string>} emotePositions\n     * @param {string} chatterName Name of the chatter the message is from\n     * @param {string} chatterColor The color of the chatters name in hex #xxxxxx\n     * @param {boolean} action\n     * @param {EmoteManager} emoteManager\n     * @param {BadgeManager} badgeManager\n     * @constructor\n     */\n    constructor(chatName, content, badges, emotePositions, chatterName, chatterColor, action,\n                emoteManager, badgeManager) {\n        super(chatName, content);\n        /** @private */\n        this.badges_ = badges;\n        /** @private */\n        this.emotes_ = emotePositions;\n        /** @private */\n        this.chatterName_ = chatterName;\n        /** @private */\n        this.chatterColor_ = chatterColor;\n        /** @private */\n        this.action_ = action;\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.badgeManager_ = badgeManager;\n    }\n\n    /**\n     * @return {string} HTML code\n     */\n    getHtml() {\n        let html = this.replaceTwitchEmotesAndEscapeHtml(this.getContent());\n        html = UserMessage.matchURL_(html);\n        html = this.replaceBttvEmotes(html);\n        html = this.replaceFfzEmotes(html);\n        html = this.replaceBadges(html);\n        return html;\n    }\n\n    /**\n     * Replace Twitch emote texts with img html tag\n     * and simultaneously escape the HTML chars in the msg\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceTwitchEmotesAndEscapeHtml(userMessage) {\n        // Replace emote texts with images\n        if (this.emotes_[0] !== '' && this.emotes_[0] != null) {\n            let sortEmotes = [];\n            for (let j = 0; j < this.emotes_.length; j++) {\n                let emote = this.emotes_[j].split(':');\n                let emoteId = emote[0];\n                let positions = emote[1].split(',');\n\n                for (let k = 0; k < positions.length; k++) {\n                    sortEmotes.push(\n                        [positions[k].split('-')[0],\n                            positions[k].split('-')[1], emoteId]);\n                }\n            }\n            for (let k = 0; k < sortEmotes.length - 1; k++) {\n                for (let l = k + 1; l < sortEmotes.length; l++) {\n                    if (parseInt(sortEmotes[k][0])\n                        > parseInt(sortEmotes[l][0])) {\n                        let zs = sortEmotes[k];\n                        sortEmotes[k] = sortEmotes[l];\n                        sortEmotes[l] = zs;\n                    }\n                }\n            }\n\n            let diff = 0;\n            let oldAfterEmotePos = 0;\n            for (let k = 0; k < sortEmotes.length; k++) {\n                let oldMessage = userMessage;\n\n                let imgString = userMessage.substring(0, oldAfterEmotePos)\n                    + UserMessage.escapeString_(userMessage.substring(oldAfterEmotePos,\n                        parseInt(sortEmotes[k][0]) + diff)) +\n                    '<span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https://static-cdn.jtvnw.net/emoticons/v1/'\n                    + sortEmotes[k][2] + '/1.0\\' /></span>';\n\n                userMessage = imgString +\n                    userMessage.substring(parseInt(sortEmotes[k][1])\n                        + 1 + diff, userMessage.length);\n                oldAfterEmotePos = imgString.length;\n                // alert(oldAfterEmotePos);\n                // alert(userMessage);\n                diff += userMessage.length - oldMessage.length;\n            }\n        } else {\n            userMessage = UserMessage.escapeString_(userMessage);\n        }\n        return userMessage;\n    }\n\n    /**\n     * Replaces Bttv emote texts with img html tag\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceBttvEmotes(userMessage) {\n        // Replace BTTV Global Emotes with img\n        let bttvGlobal = this.emoteManager_.getBttvGlobal();\n        for (let j = 0; j < bttvGlobal.length; j++) {\n            if (bttvGlobal[j].channel == null) {\n                let find = JSON.stringify(bttvGlobal[j].code);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)' +\n                    find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                let emoteId = JSON.stringify(bttvGlobal[j].id)\n                    .substring(1, JSON.stringify(bttvGlobal[j].id).length - 1);\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https://cdn.betterttv.net/emote/' + emoteId +\n                    '/1x\\' alt=\\'' + bttvGlobal[j].code + '\\' /></span> ');\n            }\n        }\n        // Replace BTTV Channel Emotes with img\n        let bttvChannels = this.emoteManager_.getBttvChannels();\n        if (bttvChannels.hasOwnProperty(this.chatName_)) {\n            for (let j = 0; j < bttvChannels[this.chatName_].length; j++) {\n                let find = JSON.stringify(bttvChannels[this.chatName_][j].code);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)' + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                let emoteId =\n                    JSON.stringify(bttvChannels[this.chatName_][j].id)\n                    .substring(1,\n                        JSON.stringify(\n                            bttvChannels[this.chatName_][j].id).length - 1);\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https://cdn.betterttv.net/emote/' +\n                    emoteId +\n                    '/1x\\' alt=\\'' +\n                    bttvChannels[this.chatName_][j].code + '\\' />' +\n                    '</span> ');\n            }\n        }\n        return userMessage;\n    }\n    /**\n     * Replaces Ffz emote texts with img html tag\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceFfzEmotes(userMessage) {\n        // Replace FFZ Global Emotes with img\n        let ffzGlobal = this.emoteManager_.getFfzGlobal();\n        for (let j = 0; j < ffzGlobal.default_sets.length; j++) {\n            let emoteSetGlobal = ffzGlobal.default_sets[j];\n            let emotesInSetGlobal =\n                ffzGlobal['sets'][emoteSetGlobal]['emoticons'];\n            for (let k = 0; k < emotesInSetGlobal.length; k++) {\n                let find = JSON.stringify(emotesInSetGlobal[k].name);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)'\n                    + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n                    + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https:' + emotesInSetGlobal[k]['urls']['1']\n                    + '\\' alt=\\'' + emotesInSetGlobal[k].name + '\\' />' +\n                    '</span> ');\n            }\n        }\n        // Replace FFZ Channel Emotes with img\n        let ffzChannels = this.emoteManager_.getFfzChannels();\n        if (ffzChannels.hasOwnProperty(this.chatName_)) {\n            let ffzChannelId = ffzChannels[this.chatName_]['room']['_id'];\n            if (ffzChannels[this.chatName_]['sets'][ffzChannelId] != null) {\n                let ffzChannelEmoteSet =\n                    ffzChannels[this.chatName_]['sets'][ffzChannelId]['emoticons'];\n                for (let j = 0; j < ffzChannelEmoteSet.length; j++) {\n                    let find = JSON.stringify(ffzChannelEmoteSet[j].name);\n                    find = find.substring(1, find.length - 1);\n                    find = '(^|\\\\b|\\\\s)'\n                        + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n                        + '(?=\\\\s|$)';\n\n                    let re = new RegExp(find, 'g');\n\n                    userMessage = userMessage.replace(re,\n                        ' <span style=\" display: inline-block;\" >&#x200b;' +\n                        '<img src=\\'https:' + ffzChannelEmoteSet[j]['urls']['1']\n                        + '\\' alt=\\'' + ffzChannelEmoteSet[j].name + '\\' />' +\n                        '</span> ');\n                }\n            }\n        }\n        return userMessage;\n    }\n\n    /**\n     * Puts badges img tags in the message\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceBadges(userMessage) {\n        let newElement;\n        if (this.action_) {\n            newElement = $('<li><span style=\"color: gray;font-size: 11px;\">'\n                + this.getTimestamp() + '</span><span style=\"color: ' + this.chatterColor_\n                + ';font-weight: bold;\"> ' + this.chatterName_ + '</span>' +\n                ' <span style=\"color: ' + this.chatterColor_ + ';\">'\n                + userMessage + '</span></li>');\n        } else {\n            newElement = $('<li><span style=\"color: gray;font-size: 11px;\">'\n                + this.getTimestamp() + '</span><span style=\"color: ' + this.chatterColor_\n                + ';font-weight: bold;\"> ' + this.chatterName_ + '</span>: '\n                + userMessage + '</li>');\n        }\n\n        // Put badges in message\n        for (let j = 0; j < this.badges_.length; j++) {\n            let badge = this.badges_[j].split('/');\n            let badgeGroup = this.badgeManager_.getBadgesChannels()[this.chatName_][badge[0]];\n            if (badge[0].localeCompare('subscriber') === 0) {\n                newElement.find('span:nth-of-type(2):first').before(\n                    '<div style=\" display: inline-block;' +\n                    'vertical-align: -32%;border-radius: 2px;' +\n                    'background-image: url(' +\n                    badgeGroup['versions'][badge[1]]['image_url_1x']\n                    + ');\" ></div>');\n            } else {\n                newElement.find('span:nth-of-type(2):first').before(\n                    '<div style=\" display: inline-block;' +\n                    'vertical-align: -32%;border-radius: 2px;' +\n                    'background-image: url(' +\n                    this.badgeManager_\n                        .getBadgesGlobal()[badge[0]]['versions'][badge[1]]['image_url_1x']\n                    + ');\"></div>');\n            }\n        }\n        return newElement;\n    }\n\n    /**\n     * Searches for URLs in the given String and replaces them with the\n     * proper <a href=\"\"> HTML Tag\n     * @param {string} txt - Text in which the links get searched\n     * @return {string} Text with <a href=\"\"> HTML Tags\n     * @private\n     */\n    static matchURL_(txt) {\n        let pattern =\n            /((^|\\s|&#32;)(http(s)?:\\/\\/.)?(www\\.)?([-a-zA-Z0-9@:%_+~#=]|\\.(?!\\.)){2,256}\\.[a-z]{2,8}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*))(?=(\\s|$|&#32;))/g;\n        txt = txt.replace(pattern, function(str, p1) {\n            let addScheme = p1.indexOf('http://') === -1\n                && p1.indexOf('https://') === -1;\n            let link = ' <a href=\"'\n                + (addScheme ? 'http://' : '')\n                + p1 + '\" target=\"_blank\">' + p1 + '</a>';\n            if (p1.startsWith(' ')) {\n                link = ' <a href=\"'\n                    + (addScheme ? 'http://' : '') +\n                    p1.substring(1, p1.length) + '\" target=\"_blank\">' + p1 + '</a>';\n            } else if (p1.startsWith('&#32;')) {\n                link = ' <a href=\"'\n                    + (addScheme ? 'http://' : '') +\n                    p1.substring(5, p1.length) + '\" target=\"_blank\">' + p1 + '</a>';\n            }\n            return link;\n        });\n        return txt;\n    }\n\n    /**\n     * Escape HTML characters in the message before adding to the chat\n     * @param {string} txt message to escape\n     * @return {string} escaped message\n     * @private\n     */\n    static escapeString_(txt) {\n        return txt.replace(/&/g, '&amp;').replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n            .replace(/`/g, '&#96;').replace(/!/g, '&#33;')\n            .replace(/@/g, '&#64;').replace(/\\$/g, '&#36;')\n            .replace(/%/g, '&#37;').replace(/=/g, '&#61;')\n            .replace(/\\+/g, '&#43;').replace(/{/g, '&#123;')\n            .replace(/}/g, '&#125;').replace(/\\[/g, '&#91;')\n            .replace(/]/g, '&#93;');\n    }\n}\nexport default UserMessage;\n","/**\n * @param data\n * @param data.getUsers\n * @param data.getUsers.display_name\n * @param data.logo\n * @param ffzGlobal.default_sets\n * @param data.chatter_count\n * @param data.chatters\n * @param chatters.moderators\n * @param chatters.viewers\n * @param chatters.global_mods\n * @param chatters.admins\n * @param chatters.staff\n */\n\n\n'use strict';\n\nimport ChatMessage from './ChatMessage.js';\nimport RoomstateMessage from './RoomstateMessage.js';\nimport UserMessage from './UserMessage.js';\nimport NameColorManager from './NameColorManager.js';\n\n/**\n * Parser for parsing IRC messages sent by Twitch\n */\nclass MessageParser {\n    /**\n     * @param {Object.<NameColorManager>} nameColorManager\n     * @param {EmoteManager} emoteManager\n     * @param {BadgeManager} badgeManager\n     * @constructor\n     */\n    constructor(nameColorManager, emoteManager, badgeManager) {\n        /** @private */\n        this.nameColorManager_ = nameColorManager;\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.badgeManager_ = badgeManager;\n    }\n\n    /**\n     * Parses an IRC message from Twitch and appends it to the corresponding chat.\n     *\n     * @param {string} msg Single raw chat message sent by Twitch\n     * @return {Array.<ChatMessage>} Array of ChatMessage and UserMessage\n     */\n    parseMessage(msg) {\n        let msgParts = msg.split(' ');\n\n        let chatName = MessageParser.parseChatName_(msgParts);\n\n        if (msgParts[2].localeCompare('WHISPER') === 0) {\n            // ToDo: Implement whisper\n            return [];\n        } else if (msgParts[2].startsWith('GLOBALUSERSTATE')) {\n            return [];\n        } else if (chatName.length < 1) {\n            // console.log('Message with no Chat specified: ' + msg);\n            return [];\n        }\n        /** @type {Array.<ChatMessage>} */\n        let chatMessages = [];\n        if (msgParts[1].localeCompare('JOIN') === 0) {\n            // Ignore JOINs (a user joined a channel)\n        } else if (msgParts[1].localeCompare('PART') === 0) {\n            // Ignore PARTs (a user left a channel)\n        } else if (msgParts[1].localeCompare('353') === 0) {\n            // Ignore namelist\n        } else if (msgParts[1].localeCompare('366') === 0) {\n            // Ignore end of namelist\n        } else if (msgParts[1].localeCompare('MODE') === 0) {\n            // Ignore gain/lose of Moderator rights\n        } else if (msgParts[2].localeCompare('ROOMSTATE') === 0) {\n            chatMessages = MessageParser.parseRoomstate_(msg, chatName);\n        } else if (msgParts[2].localeCompare('USERSTATE') === 0) {\n            // Ignore Userstate\n        } else if (msgParts[2].localeCompare('USERNOTICE') === 0) {\n            chatMessages = this.parseUsernotice_(msg, chatName);\n        } else if (msgParts[2].localeCompare('CLEARCHAT') === 0) {\n            // ToDo: Bans/Timeouts\n        } else if (msgParts[1].localeCompare('HOSTTARGET') === 0) {\n            // Ignore hosting message\n        } else if (msgParts[2].localeCompare('NOTICE') === 0\n            || msgParts[1].localeCompare('PRIVMSG') === 0) {\n            chatMessages = MessageParser.parseNotice_(msgParts, chatName);\n        } else if (msgParts[2].localeCompare('PRIVMSG') === 0) {\n            chatMessages = this.parsePrivmsg_(msgParts, chatName);\n        } else if (chatName.length >= 1) {\n            chatMessages = [new ChatMessage(chatName, msg)];\n        } else {\n            alert('Error');\n        }\n        return chatMessages;\n    }\n\n    /**\n     * @param {Array} msgParts\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     */\n    parsePrivmsg_(msgParts, chatName) {\n        let username = msgParts[1].split('!', 1);\n        username = username[0].substring(1, username[0].length);\n\n        let userMessage = msgParts;\n        let metaInfoRaw = userMessage[0].substring(1, userMessage[0].length);\n        let metaInfo = this.getMetaInfoWithColor_(metaInfoRaw.split(';'), username);\n        if (metaInfo.username != null) {\n            username = metaInfo.username;\n        }\n\n        userMessage = userMessage.slice(4).join(' ');\n        userMessage = userMessage.substring(1, userMessage.length);\n\n        let action = false;\n        if (userMessage.startsWith('\\x01ACTION')) {\n            action = true;\n            userMessage = userMessage.substring(8, userMessage.length - 2);\n        }\n        let messageContent = userMessage;\n        let emotePositions = metaInfo.emotes;\n        let badges = metaInfo.badges;\n        let color = metaInfo.color;\n        return [\n            new UserMessage(chatName, messageContent, badges,\n                emotePositions, username, color, action, this.emoteManager_, this.badgeManager_),\n        ];\n    }\n\n    /**\n     * @param {string} msg ROOMSTATE message\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    static parseRoomstate_(msg, chatName) {\n        console.log(chatName.length);\n        console.log(msg);\n        let roomstateMsg = msg.split(' ')[0];\n        roomstateMsg = roomstateMsg.substring(1, roomstateMsg.length);\n        roomstateMsg = roomstateMsg.split(';');\n        let infoMessage = '';\n        let chatInput = $('#' + chatName + ' .chatInput');\n        chatInput.find('p').remove();\n        for (let j = 0; j < roomstateMsg.length; j++) {\n            let info = roomstateMsg[j].split('=');\n            let infoKeyword = info[0];\n            switch (infoKeyword) {\n                case 'broadcaster-lang':\n                    infoMessage += info[1] + '  ';\n                    break;\n                case 'emote-only':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'EMOTE-ONLY  ';\n                    }\n                    break;\n                case 'followers-only':\n                    if (info[1].localeCompare('-1') !== 0) {\n                        infoMessage += 'FOLLOW ' + info[1] + 'm  ';\n                    }\n                    break;\n                case 'r9k':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'R9K  ';\n                    }\n                    break;\n                case 'slow':\n                    if (info[1].localeCompare('0') !== 0) {\n                        infoMessage += 'SLOW ' + info[1] + 's  ';\n                    }\n                    break;\n                case 'subs-only':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'SUB  ';\n                    }\n                    break;\n            }\n        }\n        return [new RoomstateMessage(chatName, infoMessage)];\n    }\n\n    /**\n     * @param {string} msg USERNOTICE message\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    parseUsernotice_(msg, chatName) {\n        let chatMessages = [];\n\n        let usernoticeMessage = msg.split(' ');\n        usernoticeMessage = usernoticeMessage.slice(4).join(' ');\n        let metaInfoRaw = msg.substring(1, msg.length).split(' ')[0].split(';');\n        let metaInfo = MessageParser.getMetaInfo_(metaInfoRaw);\n        chatMessages.push(new ChatMessage(chatName,\n            ((metaInfo.systemMsg != null) ? (metaInfo.systemMsg + ' ') : '')));\n        if (usernoticeMessage.length > 0) {\n            chatMessages.push(this.parseMessage(msg.split(' ')[0] + ' :' +\n                metaInfo.username.toLowerCase() + '!' +\n                metaInfo.username.toLowerCase() + '@' +\n                metaInfo.username.toLowerCase() + '.tmi.twitch.tv PRIVMSG #'\n                + chatName + ' ' + usernoticeMessage)[0]);\n        }\n        return chatMessages;\n    }\n\n    /**\n     * @param {Array.<string>} msgParts\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    static parseNotice_(msgParts, chatName) {\n        let noticeMessage = msgParts;\n        let slicePoint = msgParts[2].localeCompare('NOTICE') === 0 ? 4 : 3;\n        noticeMessage = noticeMessage.slice(slicePoint).join(' ');\n        return [new ChatMessage(chatName, noticeMessage.substring(1, noticeMessage.length))];\n    }\n\n    /**\n     * @param {Array.<string>} msgParts\n     * @return {string} chatName the message belongs to\n     * @private\n     */\n    static parseChatName_(msgParts) {\n        let chatName = '';\n        // Parse chat channel name the message is for\n        for (let j = 0; j < msgParts.length; j++) {\n            if (msgParts[j].startsWith('#')) {\n                chatName = msgParts[j].slice(1, msgParts[j].length);\n                chatName = chatName.trim();\n                break;\n            }\n        }\n        return chatName;\n    }\n\n    /**\n     * Parses the meta information part of a chat message.\n     *\n     * @param {string[]} metaMsg [{@badges=<badges>},{color=<color>},...]\n     * @param {string} username user from whom the message was sent\n     * @return {Object} Object with one property for every meta information\n     * @private\n     */\n    getMetaInfoWithColor_(metaMsg, username) {\n        let metaInfo = {};\n\n        metaInfo.color = '#acacbf';\n        metaInfo.emotes = '';\n        metaInfo.badges = '';\n\n        let gotColor = false;\n        for (let j = 0; j < metaMsg.length; j++) {\n            let info = metaMsg[j].split('=');\n            if (info.length <= 1 || info[1].localeCompare('') === 0) {\n                continue;\n            }\n\n            if (info[0].localeCompare('color') === 0) {\n                metaInfo.color = info[1];\n                if (metaInfo.color.localeCompare('') === 0\n                    && !(this.nameColorManager_.getUserColors().hasOwnProperty(username))) {\n                    metaInfo.color = this.nameColorManager_.randomColor();\n                    this.nameColorManager_.addUserColor(username, metaInfo.color);\n                } else if (metaInfo.color.localeCompare('') === 0\n                    && this.nameColorManager_.getUserColors().hasOwnProperty(username)) {\n                    metaInfo.color = this.nameColorManager_.getUserColors()[username];\n                }\n                gotColor = true;\n            } else if (info[0].localeCompare('display-name') === 0) {\n                metaInfo.username = info[1];\n            } else if (info[0].localeCompare('emotes') === 0) {\n                metaInfo.emotes = info[1].split('/');\n            } else if (info[0].localeCompare('badges') === 0) {\n                metaInfo.badges = info[1].split(',');\n            } else if (info[0].localeCompare('system-msg') === 0) {\n                metaInfo.systemMsg = info[1].replace(/\\\\s/g, ' ');\n            } else if (info[0].localeCompare('emote-sets') === 0) {\n                metaInfo.emoteSets = info[1].split(',');\n            }\n        }\n\n        if (!gotColor) {\n            if (this.nameColorManager_.getUserColors().hasOwnProperty(username)) {\n                metaInfo.color = this.nameColorManager_.getUserColors()[username];\n            } else {\n                metaInfo.color = NameColorManager.randomColor();\n                this.nameColorManager_.addUserColor(username, metaInfo.color);\n            }\n        }\n\n        // Color contrast correction\n        metaInfo.color = NameColorManager.colorCorrection(metaInfo.color);\n\n        return metaInfo;\n    }\n\n    /**\n     * Parses the meta information part of a chat message.\n     *\n     * @param {string[]} metaMsg [{@badges=<badges>},{color=<color>},...]\n     * @return {Object} Object with one property for every meta information\n     * @private\n     */\n    static getMetaInfo_(metaMsg) {\n        let metaInfo = {};\n\n        metaInfo.emotes = '';\n        metaInfo.badges = '';\n\n        for (let j = 0; j < metaMsg.length; j++) {\n            let info = metaMsg[j].split('=');\n            if (info.length <= 1 || info[1].localeCompare('') === 0) {\n                continue;\n            }\n\n            if (info[0].localeCompare('display-name') === 0) {\n                metaInfo.username = info[1];\n            } else if (info[0].localeCompare('emotes') === 0) {\n                metaInfo.emotes = info[1].split('/');\n            } else if (info[0].localeCompare('badges') === 0) {\n                metaInfo.badges = info[1].split(',');\n            } else if (info[0].localeCompare('system-msg') === 0) {\n                metaInfo.systemMsg = info[1].replace(/\\\\s/g, ' ');\n            } else if (info[0].localeCompare('emote-sets') === 0) {\n                metaInfo.emoteSets = info[1].split(',');\n            }\n        }\n        return metaInfo;\n    }\n}\nexport default MessageParser;\n","'use strict';\nimport App from './app/App.js';\nimport TwitchConstants from './app/TwitchConstants.js';\n\nlet url = window.location.href;\nlet urlMainAndTail = url.split('#');\nlet urlTailParts;\n\nif (urlMainAndTail.length > 1) {\n    urlTailParts = urlMainAndTail[1].split('&');\n    localStorage.accessToken = urlTailParts[0].split('=')[1];\n} else if (localStorage.getItem('accessToken') !== null) {\n} else {\n    window.location.replace(TwitchConstants.AUTHORIZE_URL);\n}\n\n$(function() { // this will be called when the DOM is ready\n    new App();\n});\n\n\n","/**\n * @param data.emoticon_sets\n * @param data.badge_sets\n */\n\n\n'use strict';\nimport AppUser from './AppUser.js';\n// noinspection ES6CheckImport\nimport {version} from '../../package.json';\nimport SendIRCConnection from './SendIRCConnection.js';\nimport ReceiveIRCConnection from './ReceiveIRCConnection.js';\nimport BadgeManager from './BadgeManager.js';\nimport EmoteManager from './EmoteManager.js';\nimport NameColorManager from './NameColorManager.js';\nimport FavoritesList from './FavoritesList.js';\nimport ChatManager from './ChatManager.js';\nimport MessageParser from './MessageParser.js';\n\n/**\n * Represents the whole application\n */\nclass App {\n    /**\n     * Created the whole application\n     * @constructor\n     */\n    constructor() {\n        document.title += ` ${version}`;\n        /** @private */\n        this.appUser_ = new AppUser();\n        /** @private */\n        this.nameColorManager_ = new NameColorManager();\n        /** @private */\n        this.badgeManager_ = new BadgeManager();\n        /** @private */\n        this.emoteManager_ = new EmoteManager(this.appUser_);\n        /** @private */\n        this.chatManager_ = new ChatManager(this.emoteManager_);\n        /** @private */\n        new FavoritesList(this.badgeManager_, this.emoteManager_, this.chatManager_);\n        /** @private */\n        this.sendIrcConnection_ = new SendIRCConnection(this.appUser_);\n        /** @private */\n        this.receiveIrcConnection_ = new ReceiveIRCConnection(this.appUser_,\n            new MessageParser(this.nameColorManager_, this.emoteManager_, this.badgeManager_),\n            this.chatManager_);\n        this.chatManager_.setReceiveIrcConnection(this.receiveIrcConnection_);\n        this.chatManager_.setSendIrcConnection(this.sendIrcConnection_);\n    }\n}\n\nexport default App;\n"],"names":["TwitchConstants","CLIENT_ID","PERMISSION_SCOPE","SELF_URL","AUTHORIZE_URL","GLOBAL_BADGES_API_URL","WEBSOCKET_URL","TwitchApi","[object Object]","users","context","callback","$","ajax","url","headers","Accept","Client-ID","async","done","Authorization","localStorage","accessToken","chatName","dataType","chatId","data","console","log","recentMessages","messages","j","length","AppUser","this","userName_","userNameLC_","userId_","requestAppUserData","getUserFromOAuth","token","valid","window","location","replace","user_name","toLowerCase","user_id","alert","TwitchIRCConnection","appUser","appUser_","TypeError","connection_","WebSocket","onopen","onOpen_","bind","onerror","onError_","send","getUserName","error","event","message","SendIRCConnection","super","onmessage","onMessage_","split","i","msg","startsWith","ReceiveIRCConnection","messageParser","chatManager","messageParser_","chatManager_","chatMessages","parseMessage","addMessages","BadgeManager","badgesChannels_","badgesGlobal_","downloadGlobalBadges_","badge_sets","channelLC","channelId","EmoteManager","userEmotes_","bttvChannels_","bttvGlobal_","ffzChannels_","ffzGlobal_","downloadGlobalEmotes_","getUserId","emoticon_sets","emotes","downloadFfzChannelEmotes_","downloadBttvChannelEmotes_","xhr","status","NameColorManager","userColors_","username","color","colorChoices","Math","floor","random","hexColor","rgbColor","hex2rgb_","yiqColor","rgb2yiq_","r","g","b","yiq2rgb_","y","q","hslColor","rgb2hsl_","l","min","max","hsl2rgb_","h","s","rgb2hex_","substring","toString","slice","hex","result","exec","parseInt","d","undefined","red","green","blue","chroma","abs","huePrime","secondComponent","lightnessAdjustment","round","FavoritesList","badgeManager","emoteManager","isVisible_","badgeManager_","emoteManager_","click","addFavToList","keydown","keyCode","document","getElementById","addEventListener","toggleFavList","loadFavoritesFromLocalStorage_","channelsArray","JSON","parse","getItem","channelCount","channels","setItem","stringify","err","style","display","css","width","backgroundImage","value","type","channelsCount","getUsers","notExistingChannelsCount","_total","channel","display_name","_id","profilePicURL","logo","placeholder","addFavLine_","showChannelDoesNotExistInfo_","queue","next","info","attr","delay","downloadChannelBadges","downloadChannelEmotes","favList","append","on","addChat","parent","remove","removeChannelFromLocalStorage_","sortable","axis","animation","cursor","revert","scroll","containment","storeChannelInLocalStorage_","channelName","index","indexOf","splice","push","ChatMessage","content","chatName_","timestamp_","getCurrentTimeFormatted_","content_","trim","time","currentDate","Date","getHours","getMinutes","RoomstateMessage","getContent","Chat","receiveIrcConnection","sendIrcConnection","channelName_","channelNameLC_","receiveIrcConnection_","sendIrcConnection_","messageCount_","containerCount_","MESSAGE_LIMIT_","MESSAGES_IN_CONTAINER_","chatMessage","getChatName","getHtml","chatMessageList","children","limitMessages_","hideNotVisibleMessages","correctScrollPosition_","isScrolledToBottom","hide","bottom","chatContent","scrollHeight","scrollTop","outerHeight","contentHeight","find","imagesLoaded","setTimeout","is","addEmotesToEmoteMenu_","addEmoteMenuImgClickAbility_","addEmoteMenuGroupClickAbility_","addEmoteMenuToggleAbility_","addEmoteMenuDraggableAbility_","addEmoteMenuResizableAbility_","addStreamIframeAbility_","addResizeAbility_","addChatterListAbility_","addSendMessagesAbility_","addNewMessageInfoAbility_","userEmotes","getUserEmotes","hasOwnProperty","call","emoteSet","prepend","k","id","code","bttvGlobal","getBttvGlobal","ffzGlobal","getFfzGlobal","default_sets","emoteSetGlobal","emotesInSetGlobal","name","bttvChannels","getBttvChannels","emoteId","ffzChannels","getFfzChannels","ffzChannelId","ffzChannelEmoteSet","newValue","emoteName","inputField","curValue","val","endsWith","height","$emoteMenu","show","top","left","right","chatArea","draggable","resizable","handles","minHeight","minWidth","start","stop","contentHeightOld","resize","$newMessagesInfo","$chatContent","$chatContentArea","toggleVL","viewerlist","getChatterList","empty","chatter_count","chatters","moderators","modList","staff","staffList","admins","adminsList","global_mods","globalModsList","viewers","viewersList","preventDefault","scrollLeft","ChatManager","chatList_","addMessage","off","leaveChat","isChatAlreadyAdded","addAbilities","joinChat","removeChat_","handle","ui","item","UserMessage","badges","emotePositions","chatterName","chatterColor","action","badges_","emotes_","chatterName_","chatterColor_","action_","html","replaceTwitchEmotesAndEscapeHtml","matchURL_","replaceBttvEmotes","replaceFfzEmotes","replaceBadges","userMessage","sortEmotes","emote","positions","zs","diff","oldAfterEmotePos","oldMessage","imgString","escapeString_","re","RegExp","newElement","getTimestamp","badge","badgeGroup","getBadgesChannels","localeCompare","before","getBadgesGlobal","txt","str","p1","addScheme","link","MessageParser","nameColorManager","nameColorManager_","msgParts","parseChatName_","parseRoomstate_","parseUsernotice_","parseNotice_","parsePrivmsg_","metaInfoRaw","metaInfo","getMetaInfoWithColor_","join","messageContent","roomstateMsg","infoMessage","usernoticeMessage","getMetaInfo_","systemMsg","noticeMessage","slicePoint","metaMsg","gotColor","getUserColors","randomColor","addUserColor","emoteSets","colorCorrection","urlTailParts","urlMainAndTail","href","title","version","setReceiveIrcConnection","setSendIrcConnection"],"mappings":"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"}