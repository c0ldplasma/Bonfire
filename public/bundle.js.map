{"version":3,"file":"bundle.js","sources":["../src/app/TwitchConstants.js","../src/app/TwitchApi.js","../src/app/AppUser.js","../src/app/TwitchIRCConnection.js","../src/app/SendIRCConnection.js","../src/app/ReceiveIRCConnection.js","../src/app/BadgeManager.js","../src/app/EmoteManager.js","../src/app/FavoritesList.js","../src/app/ChatMessage.js","../src/app/RoomStateMessage.js","../src/app/Chat.js","../src/app/ChatManager.js","../src/app/UserMessage.js","../src/app/NameColorManager.js","../src/app/MessageParser.js","../src/main.js","../src/app/App.js"],"sourcesContent":["'use strict';\n\n/**\n * Twitch constants like CLIENT_ID and API-URLs\n */\nclass TwitchConstants {\n    /**\n     * @return {string} Client Id for authorization on the Twitch apis\n     * @constructor\n     */\n    static get CLIENT_ID() {\n        // noinspection SpellCheckingInspection\n        return 'xllef7inid2mbeqoaj2o6bsohg7pz7';\n    }\n\n    /**\n     * @return {string} Scope needed for the app (for requesting an access token)\n     * @constructor\n     */\n    static get PERMISSION_SCOPE() {\n        return 'chat_login+user_blocks_edit+user_blocks_read+user_subscriptions';\n    }\n\n    /**\n     * @return {string} URL of the app\n     * @constructor\n     */\n    static get SELF_URL() {\n        return 'http://localhost:5000/';\n    }\n\n    /**\n     * @return {string} URL for getting an access token\n     * @constructor\n     */\n    static get AUTHORIZE_URL() {\n        return 'https://id.twitch.tv/oauth2/authorize?response_type=token&client_id=' +\n        TwitchConstants.CLIENT_ID + '&redirect_uri=' + TwitchConstants.SELF_URL + '&scope=' +\n        TwitchConstants.PERMISSION_SCOPE;\n    }\n\n    /**\n     * @return {string} URL of the badges api for getting global badges\n     * @constructor\n     */\n    static get GLOBAL_BADGES_API_URL() {\n        return 'https://badges.twitch.tv/v1/badges/global/display';\n    }\n\n    /**\n     * @return {string} The URL for connecting to the IRC Chat\n     * @constructor\n     */\n    static get WEBSOCKET_URL() {\n        return 'wss://irc-ws.chat.twitch.tv:443';\n    }\n}\n\nexport default TwitchConstants;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants';\n\n/**\n * Twitch Api calls\n */\nclass TwitchApi {\n    /**\n     * Gets the data to every user in the users parameter\n     * Calls the callback function with the JSON Data when request finished\n     * @param {string} users comma separated list with usernames\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getUsers(users, context, callback) {\n        $.ajax({\n            context: context,\n            url: ('https://api.twitch.tv/helix/users'),\n            dataType: 'json',\n            headers: {\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            data: {login: users},\n            async: true,\n        }).done(callback);\n    }\n\n    /**\n     * Gets the data to the user the OAuth token is from\n     * @return {data}\n     */\n    static async getUserFromOAuth() {\n        return await $.ajax({\n            statusCode: {\n                401: function() {\n                    window.location.replace(TwitchConstants.AUTHORIZE_URL);\n                },\n            },\n            url: ('https://id.twitch.tv/oauth2/validate'),\n            dataType: 'json',\n            headers: {\n                'Authorization': ('OAuth ' + localStorage.accessToken),\n            },\n        });\n    }\n\n    /**\n     * Gets the names of all chatters in the specified chat\n     * @param {string} chatName name of the chat\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getChatterList(chatName, context, callback) {\n        $.ajax({\n            context: context,\n            url: ('https://tmi.twitch.tv/group/user/' + chatName\n                + '/chatters'),\n            headers: {'Accept': 'application/vnd.twitchtv.v5+json'},\n            dataType: 'jsonp',\n            async: true,\n        }).done(callback);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets recent messages from the specified chat\n     * @param {string} chatId\n     * @param {object} context sets the Object 'this' is referring to in the callback function\n     * @param {function} callback function(data) that gets called after the request finished\n     */\n    static getRecentMessages(chatId, context, callback) {\n        // Download recent messages\n        $.ajax({\n            context: context,\n            type: 'GET',\n            url: ('https://chats.c0ldplasma.de/php/recentMessages.php'),\n            data: {chatId: chatId},\n            async: true,\n        }).done(callback);\n    }\n}\n\nexport default TwitchApi;\n","/**\n * @param data.token.user_name\n * @param data.token.user_id\n */\n'use strict';\nimport TwitchApi from './TwitchApi.js';\n/**\n * Represents the User of the chat client\n */\nclass AppUser {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /** @private */\n        this.userName_ = '';\n        // noinspection JSUnusedGlobalSymbols\n        /** @private */\n        this.userNameLC_ = '';\n        // noinspection JSUnusedGlobalSymbols\n        /** @private */\n        this.userId_ = '';\n    }\n\n    /**\n     * Getter\n     * @return {string} this.userName_\n     */\n    getUserName() {\n        return this.userName_;\n    }\n    /**\n     * Getter\n     * @return {string} this.userId_\n     */\n    getUserId() {\n        return this.userId_;\n    }\n\n    /**\n     * Sends an ajax request to twitch to receive userName_ and userId_ of the AppUser\n     * @return {Promise}\n     */\n    async requestAppUserData() {\n        return await TwitchApi.getUserFromOAuth().then((data) => {\n            console.log(data);\n            if (typeof(data.login) !== 'undefined') {\n                this.userName_ = data.login;\n                // noinspection JSUnusedGlobalSymbols\n                this.userNameLC_ = data.login.toLowerCase();\n                // noinspection JSUnusedGlobalSymbols\n                this.userId_ = data.user_id;\n            } else {\n                alert('Error while getting username');\n            }\n        });\n    }\n}\nexport default AppUser;\n","'use strict';\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Websocket connection to Twitch\n * @abstract\n */\nclass TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        /** @private */\n        this.appUser_ = appUser;\n\n        if (new.target === TwitchIRCConnection) {\n            throw new TypeError('Cannot construct abstract instances ' +\n                'of TwitchIRCConnection directly');\n        }\n        this.isLoaded_ = false;\n        this.connection_ = new WebSocket(TwitchConstants.WEBSOCKET_URL);\n        this.connection_.onopen = this.onOpen_.bind(this);\n        this.connection_.onerror = TwitchIRCConnection.onError_.bind(this);\n    }\n\n    /**\n     * Gets called when the connection established\n     * @private\n     */\n    onOpen_() {\n        this.connection_.send('CAP REQ :twitch.tv/membership');\n        this.connection_.send('CAP REQ :twitch.tv/tags');\n        this.connection_.send('CAP REQ :twitch.tv/commands');\n        this.connection_.send('PASS oauth:' + localStorage.accessToken);\n        this.connection_.send('NICK ' + this.appUser_.getUserName());\n        this.isLoaded_ = true;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isLoaded() {\n        return this.isLoaded_;\n    }\n\n    /**\n     * Gets called on error\n     * @private\n     */\n    static onError_() {\n        console.log('WebSocket Error ' + error);\n        alert('ERROR: ' + error);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Gets called on message\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     * @abstract\n     */\n    onMessage_(event) {};\n\n    /**\n     * Leave the specified chat\n     * @param {string} chatName\n     */\n    leaveChat(chatName) {\n        this.connection_.send('PART #' + chatName);\n    }\n\n    /**\n     * Join the specified chat\n     * @param {string} chatName\n     */\n    joinChat(chatName) {\n        this.connection_.send('JOIN #' + chatName);\n    }\n\n    /**\n     * Sends the specified message to the Websocket connection\n     * @param {string} message\n     */\n    send(message) {\n        this.connection_.send(message);\n    }\n}\n\nexport default TwitchIRCConnection;\n","'use strict';\nimport TwitchIRCConnection from './TwitchIRCConnection.js';\n/**\n * Websocket connection to Twitch for sending\n */\nclass SendIRCConnection extends TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        super(appUser);\n        this.connection_.onmessage = this.onMessage_.bind(this);\n    }\n\n    /**\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     */\n    onMessage_(event) {\n        let messages = event.data.split('\\n');\n\n        for (let i = 0; i < messages.length; i++) {\n            let msg = messages[i];\n\n            if (msg.length <= 1) {\n                continue;\n            }\n\n            if (msg.startsWith('PING :tmi.twitch.tv')) {\n                this.connection_.send('PONG :tmi.twitch.tv');\n            }\n        }\n    }\n}\nexport default SendIRCConnection;\n\n","'use strict';\nimport TwitchIRCConnection from './TwitchIRCConnection.js';\n\n/**\n * Websocket connection to Twitch for receiving\n */\nclass ReceiveIRCConnection extends TwitchIRCConnection {\n    /**\n     * @param {AppUser} appUser\n     * @param {MessageParser} messageParser\n     * @param {ChatManager} chatManager\n     * @constructor\n     */\n    constructor(appUser, messageParser, chatManager) {\n        super(appUser);\n        this.messageParser_ = messageParser;\n        this.chatManager_ = chatManager;\n        this.connection_.onmessage = this.onMessage_.bind(this);\n    }\n\n    /**\n     * @param {object} event event triggered by the Websocket connection\n     * @private\n     */\n    onMessage_(event) {\n        let messages = event.data.split('\\n');\n\n        for (let i = 0; i < messages.length; i++) {\n            let msg = messages[i];\n            if (msg.startsWith('PING :tmi.twitch.tv')) {\n                this.connection_.send('PONG :tmi.twitch.tv');\n            } else if (msg.length > 1) {\n                let chatMessages = this.messageParser_.parseMessage(msg);\n                this.chatManager_.addMessages(chatMessages);\n            } else {\n                // console.log('Received empty message in ReceiveIRVConnection onMessage_()');\n            }\n        }\n    }\n}\n\nexport default ReceiveIRCConnection;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Manages the badges which appear in front of the chat username\n */\nclass BadgeManager {\n    /**\n     * @constructor\n     */\n    constructor() {\n        this.badgesChannels_ = {};\n        // noinspection JSUnusedGlobalSymbols\n        this.badgesGlobal_ = null;\n\n        this.downloadGlobalBadges_();\n    }\n\n    /**\n     * @return {Object}\n     */\n    getBadgesChannels() {\n        return this.badgesChannels_;\n    }\n\n    /**\n     * @return {Object}\n     */\n    getBadgesGlobal() {\n        return this.badgesGlobal_;\n    }\n\n    /**\n     * Downloads the JSON information for global badges\n     * @private\n     */\n    downloadGlobalBadges_() {\n        // Download Global Badges JSON\n        $.ajax({\n            context: this,\n            url: (TwitchConstants.GLOBAL_BADGES_API_URL),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            async: true,\n        }).done(function(data) {\n            // noinspection JSUnusedGlobalSymbols\n            this.badgesGlobal_ = data.badge_sets;\n        });\n    }\n\n    /**\n     * @param {string} channelLC\n     * @param {string} channelId\n     */\n    downloadChannelBadges(channelLC, channelId) {\n        // Download Channel Badges\n        $.ajax({\n            context: this,\n            url: ('https://badges.twitch.tv/v1/badges/channels/'\n                + channelId + '/display'),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n            },\n            async: true,\n        }).done(function(data) {\n            this.badgesChannels_[channelLC] = data.badge_sets;\n        });\n    }\n}\nexport default BadgeManager;\n","'use strict';\n\nimport TwitchConstants from './TwitchConstants.js';\n\n/**\n * Manages the Emotes for the chat messages and the emote menu\n */\nclass EmoteManager {\n    /**\n     * @param {AppUser} appUser\n     * @constructor\n     */\n    constructor(appUser) {\n        this.appUser_ = appUser;\n\n        this.userEmotes_ = {};\n\n        this.bttvChannels_ = {};\n        this.bttvGlobal_ = {};\n\n        this.ffzChannels_ = {};\n        this.ffzGlobal_ = {};\n\n        this.downloadGlobalEmotes_();\n    }\n\n    /**\n     * @return {Object}\n     */\n    getUserEmotes() {\n        return this.userEmotes_;\n    }\n    /**\n     * @return {Object}\n     */\n    getBttvGlobal() {\n        return this.bttvGlobal_;\n    }\n    /**\n     * @return {Object}\n     */\n    getFfzGlobal() {\n        return this.ffzGlobal_;\n    }\n    /**\n     * @return {Object}\n     */\n    getBttvChannels() {\n        return this.bttvChannels_;\n    }\n    /**\n     * @return {Object}\n     */\n    getFfzChannels() {\n        return this.ffzChannels_;\n    }\n\n    /**\n     * Downloads the global Twitch, BTTV and FFZ Emote JSONs\n     * @private\n     */\n    downloadGlobalEmotes_() {\n        // Gets a list of the emojis and emoticons that the specified\n        // user can use in chat.\n        $.ajax({\n            context: this,\n            url: ('https://api.twitch.tv/kraken/users/' + this.appUser_.getUserId() + '/emotes'),\n            headers: {\n                'Accept': 'application/vnd.twitchtv.v5+json',\n                'Client-ID': TwitchConstants.CLIENT_ID,\n                'Authorization': ('OAuth ' + localStorage.accessToken),\n            },\n            async: true,\n        }).done(function(data) {\n            this.userEmotes_ = data.emoticon_sets;\n            // console.log(data.emoticon_sets);\n        });\n\n        // Download Global BTTV Emotes JSON\n        $.ajax({\n            context: this,\n            url: ('https://api.betterttv.net/2/emotes'),\n            async: true,\n        }).done(function(data) {\n            this.bttvGlobal_ = data.emotes;\n        });\n\n        // Download Global FFZ Emotes JSON\n        $.ajax({\n            context: this,\n            url: ('https://api.frankerfacez.com/v1/set/global'),\n            async: true,\n        }).done(function(data) {\n            // console.log(data);\n            this.ffzGlobal_ = data;\n        });\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     */\n    downloadChannelEmotes(channelLC) {\n        this.downloadFfzChannelEmotes_(channelLC);\n        this.downloadBttvChannelEmotes_(channelLC);\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     * @private\n     */\n    downloadBttvChannelEmotes_(channelLC) {\n        // Download BTTV Channel Emotes\n        $.ajax({\n            context: this,\n            url: ('https://api.betterttv.net/2/channels/' + channelLC),\n            async: true,\n            dataType: 'json',\n            error: function(xhr) {\n                if (xhr.status === 404) {\n                    // Ignore - No BTTV emotes in this channel\n                    console.log('No BTTV Emotes in Channel: ' + channelLC);\n                }\n            },\n        }).done(function(data) {\n            this.bttvChannels_[channelLC] = data.emotes;\n        });\n    }\n\n    /**\n     *\n     * @param {string} channelLC\n     * @private\n     */\n    downloadFfzChannelEmotes_(channelLC) {\n        // Download FFZ Channel Emotes/Moderator Channel Badge\n        $.ajax({\n            context: this,\n            url: ('https://api.frankerfacez.com/v1/room/' + channelLC),\n            async: true,\n            dataType: 'json',\n            error: function(xhr) {\n                if (xhr.status === 404) {\n                    // Ignore - No FFZ emotes in this channel\n                    console.log('No FFZ Emotes in Channel: ' + channelLC);\n                }\n            },\n        }).done(function(data) {\n            this.ffzChannels_[channelLC] = data;\n        });\n    }\n}\nexport default EmoteManager;\n","'use strict';\n\n/**\n * @param data._total\n * @param data.users._id\n * @param data.profile_image_url\n */\n\nimport TwitchApi from './TwitchApi.js';\n\n/**\n * List of favorite Twitch channels\n */\nclass FavoritesList {\n    /**\n     * @param {BadgeManager} badgeManager\n     * @param {EmoteManager} emoteManager\n     * @param {ChatManager} chatManager\n     * @constructor\n     */\n    constructor(badgeManager, emoteManager, chatManager) {\n        this.isVisible_ = true;\n        this.badgeManager_ = badgeManager;\n        this.emoteManager_ = emoteManager;\n        this.chatManager_ = chatManager;\n\n        $('#addFavFromInput').click(this.addFavToList.bind(this));\n        $('#newFavInput').keydown(function(event) {\n            if (event.keyCode === 13) {\n                $('#addFavFromInput').click();\n            }\n        });\n        document.getElementById('channelListToggle').addEventListener('click', this.toggleFavList);\n        this.loadFavoritesFromLocalStorage_();\n    }\n\n    /**\n     * @private\n     */\n    loadFavoritesFromLocalStorage_() {\n        try {\n            let channelsArray = JSON.parse(localStorage.getItem('channels'));\n            if (channelsArray !== null) {\n                while (channelsArray.length) {\n                    let channels = channelsArray.splice(0, 98);\n                    this.addFavToList(channels);\n                }\n            } else {\n                let channels = [];\n                localStorage.setItem('channels', JSON.stringify(channels));\n            }\n        } catch (err) {\n            alert('Error: ' + err);\n            let channels = [];\n            localStorage.setItem('channels', JSON.stringify(channels));\n        }\n    }\n\n    /**\n     * If the favorites list is enabled, disable it.\n     * If its disabled, enable it.\n     */\n    toggleFavList() {\n        this.isVisible_ = !this.isVisible_;\n        if (!this.isVisible_) {\n            document.getElementById('fav-channel-list').style.display\n                = 'inline-block';\n            $('.container').css({'width': 'calc(100% - 250px)'});\n            document.getElementById('channelListToggle').style.backgroundImage\n                = 'url(./img/arrow_down.svg)';\n        } else {\n            document.getElementById('fav-channel-list').style.display = 'none';\n            $('.container').css({'width': '100%'});\n            document.getElementById('channelListToggle').style.backgroundImage\n                = 'url(./img/arrow_up.svg)';\n        }\n    }\n\n    /**\n     * Add a channel to the list of favorites\n     *\n     * @param {Array.<string>} channelArray channel name or null\n     */\n    addFavToList(channelArray) {\n        let channels = document.getElementById('newFavInput').value.split(',');\n        if ($.isArray(channelArray)) {\n            channels = channelArray;\n        }\n        let channelsCount = channels.length;\n\n        TwitchApi.getUsers(channels, this, function(data) {\n            data = data.data;\n            let notExistingChannelsCount = channelsCount - data._total;\n            for (let i = 0; i < data.length; i++) {\n                let channel = data[i].display_name;\n                let channelId = data[i].id;\n                let profilePicURL = data[i].profile_image_url;\n                // ToDo: Check if next line is necessary\n                document.getElementById('newFavInput').placeholder = '';\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                this.addFavLine_(channel, profilePicURL, channelId);\n            }\n\n            if (notExistingChannelsCount > 0) {\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                this.showChannelDoesNotExistInfo_(notExistingChannelsCount);\n            }\n        });\n    }\n\n    /**\n     * @param {number} notExistingChannelsCount\n     * @private\n     */\n    showChannelDoesNotExistInfo_(notExistingChannelsCount) {\n        document.getElementById('newFavInput').value = '';\n        $('#newFavInput').queue(function(next) {\n            let info = (notExistingChannelsCount > 1) ? ' Channels do not exist.' :\n                ' Channel does not exist.';\n            $(this).attr('placeholder', notExistingChannelsCount + info);\n            next();\n        }).delay(5000).queue(function(next) {\n            $(this).attr('placeholder', '');\n            next();\n        });\n    }\n\n    /**\n     * @param {string} channel channel name\n     * @param {string} profilePicURL URL to profile image file\n     * @param {string} channelId channel id\n     */\n    addFavLine_(channel, profilePicURL, channelId) {\n        let channelLC = channel.toLowerCase();\n\n        this.badgeManager_.downloadChannelBadges(channelLC, channelId);\n        this.emoteManager_.downloadChannelEmotes(channelLC);\n\n\n        if (channel.length > 0\n            && $('.favEntry[id$=\\'' + channelLC + '\\']').length === 0) {\n            document.getElementById('newFavInput').value = '';\n\n            let favList = $('#fav-channel-list');\n\n            favList.append('<div class=\"favEntry\" id=\"' + channelLC\n                + '\"><img class=\"profilePic\" src=\"' + ((profilePicURL != null)\n                    ? profilePicURL : '/img/defaultProfile.png')\n                + '\" alt=\"Pic.\" /><input class=\"favEntryAddChatButton\" ' +\n                'id=\"' + channelLC + '\" type=\"button\" value=\"' + channel\n                + '\"><input class=\"favEntryRemoveButton\" ' +\n                'id=\"' + channelLC + '\" type=\"button\" ></div>');\n\n            $(document).on('click', '.favEntryAddChatButton[id$=\\''\n                + channelLC + '\\']', this, function(event) {\n                event.data.chatManager_.addChat(channel, channelId);\n            });\n\n            $(document).on('click', '.favEntryRemoveButton[id$=\\'' + channelLC + '\\']', this,\n                function(event) {\n                    $(this).parent().remove();\n                    event.data.removeChannelFromLocalStorage_(channelLC);\n            });\n\n            // ToDo: is it needed to do channelList.sortable() every time when an entry is added?\n            favList.sortable({\n                axis: 'y',\n                animation: 300,\n                cursor: 'move',\n                revert: 200,\n                scroll: true,\n                containment: 'parent',\n            });\n        }\n\n        this.storeChannelInLocalStorage_(channelLC);\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * @param {string} channelName Twitch channel id of the channel that is stored\n     * @private\n     */\n    storeChannelInLocalStorage_(channelName) {\n        let channels = JSON.parse(localStorage.getItem('channels'));\n        let index = channels.indexOf(channelName);\n        if (index > -1) {\n            channels.splice(index, 1);\n        }\n        channels.push(channelName);\n        localStorage.setItem('channels', JSON.stringify(channels));\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * @param {string} channelLC Twitch channel id of the channel that gets deleted\n     * @private\n     */\n    removeChannelFromLocalStorage_(channelLC) {\n        let channels = JSON.parse(localStorage.getItem('channels'));\n        let index = channels.indexOf(channelLC);\n        if (index > -1) {\n            channels.splice(index, 1);\n        }\n        localStorage.setItem('channels', JSON.stringify(channels));\n    }\n}\n\nexport default FavoritesList;\n","'use strict';\n\n/**\n * Represents one chat message\n */\nclass ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @constructor\n     */\n    constructor(chatName, content) {\n        this.chatName_ = chatName;\n        /** @private */\n        this.timestamp_ = this.getCurrentTimeFormatted_();\n        /** @private */\n        this.content_ = content.trim();\n        /** @private */\n    }\n\n    /**\n     * @return {string}\n     */\n    getContent() {\n        return this.content_;\n    }\n    /**\n     * @return {string}\n     */\n    getTimestamp() {\n        return this.timestamp_;\n    }\n    /**\n     * @return {string}\n     */\n    getChatName() {\n        return this.chatName_;\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * Returns the current time in 24h format\n     * @return {string} time in format HH:MM\n     * @private\n     */\n    getCurrentTimeFormatted_() {\n        let currentDate = new Date();\n        let time;\n        if (currentDate.getHours() >= 10 && currentDate.getMinutes() >= 10) {\n            time = currentDate.getHours() + ':' + currentDate.getMinutes();\n        } else if (currentDate.getHours() < 10 && currentDate.getMinutes() >= 10) {\n            time = '0' + currentDate.getHours() + ':' + currentDate.getMinutes();\n        } else if (currentDate.getHours() >= 10 && currentDate.getMinutes() < 10) {\n            time = currentDate.getHours() + ':0' + currentDate.getMinutes();\n        } else {\n            time = '0' + currentDate.getHours() + ':0' + currentDate.getMinutes();\n        }\n        return time;\n    }\n    /**\n     * @return {string} HTML Code\n     */\n    getHtml() {\n        return '<li style=\"border-top: 1px solid #673ab7;' +\n            'border-bottom: 1px solid #673ab7;padding-top: 3px; ' +\n            'padding-bottom: 3px;\"><span style=\"color: gray;' +\n            'font-size: 11px;\">' + this.timestamp_ + '</span>  ' +\n            this.content_\n            + '</li>';\n    }\n}\n\nexport default ChatMessage;\n","'use strict';\nimport ChatMessage from './ChatMessage.js';\n\n/**\n * Represents one roomState message\n */\nclass RoomStateMessage extends ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @constructor\n     */\n    constructor(chatName, content) {\n        super(chatName, content);\n    }\n\n    /**\n     * @return {string} HTML Code\n     */\n    getHtml() {\n        return '<p style=\"color: gray; font-size: 11px;' +\n            'padding-left: 10px;font-weight: 200;\">' + this.getContent() + '</p>';\n    }\n}\nexport default RoomStateMessage;\n","import TwitchApi from './TwitchApi.js';\nimport RoomStateMessage from './RoomStateMessage.js';\n\n/**\n * Represents one chat column on the app\n */\nclass Chat {\n    /**\n     * Adds the chat column for channelName to the app\n     *\n     * @param {string} channelName Name of the channel\n     * @param {string} channelId\n     * @param {EmoteManager} emoteManager\n     * @param {ReceiveIRCConnection} receiveIrcConnection\n     * @param {SendIRCConnection} sendIrcConnection\n     * @param {MessageParser} messageParser\n     */\n    constructor(channelName, channelId, emoteManager, receiveIrcConnection, sendIrcConnection,\n                messageParser) {\n        /** @private */\n        this.channelName_ = channelName;\n        /** @private */\n        this.channelId_ = channelId;\n        /** @private */\n        this.channelNameLC_ = channelName.toLowerCase();\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.receiveIrcConnection_ = receiveIrcConnection;\n        /** @private */\n        this.sendIrcConnection_ = sendIrcConnection;\n        /** @private */\n        this.messageParser_ = messageParser;\n        /** @private */\n        this.messageCount_ = 0;\n        /** @private */\n        this.containerCount_ = 0;\n        /** @private\n         *  @const */\n        this.MESSAGE_LIMIT_ = 200000;\n        /** @private\n         *  @const */\n        this.MESSAGES_IN_CONTAINER_ = 100;\n\n        this.loadRecentMessages_();\n    }\n\n    /**\n     * @param {Object.<ChatMessage>} chatMessage\n     */\n    addMessage(chatMessage) {\n        if (chatMessage instanceof RoomStateMessage) {\n            let chatInput = $('.chatInput#' + chatMessage.getChatName().toLowerCase());\n            chatInput.append(chatMessage.getHtml());\n        } else {\n            let chatMessageList = $('#' + this.channelName_.toLowerCase() + 'contentArea');\n\n            if (chatMessageList.children('div').length === 0 ||\n                (chatMessageList.children('div').length !== 0 &&\n                    chatMessageList.children('div:last')\n                        .children('li').length >= this.MESSAGES_IN_CONTAINER_)) {\n                chatMessageList.append('<div></div>');\n                this.containerCount_++;\n            }\n            chatMessageList.children('div:last').append(chatMessage.getHtml());\n            this.messageCount_++;\n            this.limitMessages_();\n            this.hideNotVisibleMessages();\n            this.correctScrollPosition_();\n        }\n    }\n\n    /**\n     * Downloads recent chat messages and adds them to the chat\n     * @private\n     */\n    loadRecentMessages_() {\n        TwitchApi.getRecentMessages(this.channelId_, this, function(data) {\n            console.log(data);\n            let recentMessages = JSON.parse(data).messages;\n            for (let j = 0; j < recentMessages.length; j++) {\n                let chatMessages = this.messageParser_.parseMessage(recentMessages[j]);\n                for (let i = 0; i < chatMessages.length; i++) {\n                    // noinspection JSPotentiallyInvalidUsageOfClassThis\n                    this.addMessage(chatMessages[i]);\n                }\n            }\n        });\n    }\n\n    /**\n     * Checks whether there are more than this.MESSAGE_LIMIT_ messages in chat.\n     * If yes than remove the first div with messages\n     * @private\n     */\n    limitMessages_() {\n        if (this.messageCount_ >= this.MESSAGE_LIMIT_) {\n            $('#' + this.channelName_ + ' .chatContent .chatMessageList div:first').remove();\n            // noinspection JSUnusedGlobalSymbols\n            this.messageCount_ -= this.MESSAGES_IN_CONTAINER_;\n            this.containerCount_--;\n        }\n    }\n\n    /**\n     * When chat is scrolled to bottom, this hides all message containers except the last 3\n     */\n    hideNotVisibleMessages() {\n        // Hide all divs with 100 messages each which are not the last 3 to improve performance\n        if (this.containerCount_ > 3 && this.isScrolledToBottom()) {\n            let chatMessageList = $('#' + this.channelName_ + 'contentArea');\n            chatMessageList.children('div:visible').slice(0, -3).hide();\n        }\n    }\n\n    /**\n     * Checks if the Chat is scrolled to the bottom\n     * @return {boolean} True if on bottom, false if not\n     */\n    isScrolledToBottom() {\n        let bottom = false;\n        let chatContent = $('#' + this.channelNameLC_ + 'scrollArea');\n        if (chatContent[0].scrollHeight - chatContent.scrollTop()\n            < chatContent.outerHeight() + 50) bottom = true;\n        return bottom;\n    }\n\n    /**\n     * @private\n     */\n    correctScrollPosition_() {\n        // Scroll to bottom\n        let bottom = this.isScrolledToBottom();\n        let chatContent = $('#' + this.channelNameLC_ + 'scrollArea');\n        if (bottom) {\n            let contentHeight = chatContent[0].scrollHeight;\n            chatContent.scrollTop(contentHeight + 50);\n            // chatContent.stop(true, false).delay(50)\n            // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n            $('#' + this.channelNameLC_ + ' .chatContent .chatMessageList')\n                .find('p:last').imagesLoaded(function() {\n                setTimeout(function() {\n                    contentHeight = chatContent[0].scrollHeight;\n                    chatContent.scrollTop(contentHeight + 50);\n                    // chatContent.stop(true, false).delay(50)\n                    // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n                    // alert(\"wub\");\n                }, 50);\n            });\n        } else if (!bottom\n            && $('#' + this.channelNameLC_ + ' .chatNewMessagesInfo').is(':hidden')) {\n            let contentHeight = chatContent[0].scrollHeight;\n            chatContent.scrollTop(contentHeight + 50);\n            // chatContent.stop(true, false).delay(50)\n            // .animate({ scrollTop: contentHeight }, 2000, 'linear');\n        }\n    }\n\n    /**\n     * @return {string} HTML Code for the chat\n     */\n    getHtml() {\n        let channelLC = this.channelName_.toLowerCase();\n        return `<div class=\"chat\" id=\"${channelLC}\">\n        <div class=\"chatHeader\">\n        <button class=\"toggleViewerList\" id=\"${channelLC}\"></button>\n        <span>${this.channelName_}</span>\n        <button class=\"removeChat\" id=\"${channelLC}\"></button>\n        <button class=\"toggleStream\" id=\"${channelLC}\"></button>\n        </div>\n        <div class=\"chatContent\" id=\"${channelLC}scrollArea\">\n        <div class=\"chatMessageList\" id=\"${channelLC}contentArea\"></div>\n        </div>\n        <div class=\"chatInput\" id=\"${channelLC}\">\n        <div class=\"chatNewMessagesInfo\" id=\"${channelLC}\">More messages below.</div>\n        <img class=\"kappa\" src=\"/img/Kappa.png\" alt=\"E\"/><textarea maxlength=\"500\"\n        class=\"chatInputField\"\n        id=\"${channelLC}\"\n        placeholder=\"Send a message...\"></textarea>\n        <div class=\"emoteMenu\">\n        <div class=\"emotes\">\n        <div class=\"bttvEmotes\" style=\"width: 100%;\"><h3>BTTV Emotes</h3></div>\n        <div class=\"bttvChannelEmotes\" style=\"width: 100%;\"><h3>BTTV Channel Emotes</h3>\n        </div>\n        <div class=\"ffzEmotes\" style=\"width: 100%;\"><h3>FFZ Emotes</h3></div>\n        <div class=\"ffzChannelEmotes\" style=\"width: 100%;\"><h3>FFZ Channel Emotes</h3></div>\n        </div>\n        </div>\n        </div>\n        <div class=\"chatViewerList\" id=\"${channelLC}\"></div>\n        </div>`;\n    }\n\n    /**\n     * Adds all abilities to the Chat (Button actions etc.)\n     */\n    addAbilities() {\n        this.addEmotesToEmoteMenu_();\n        this.addEmoteMenuImgClickAbility_();\n        this.addEmoteMenuGroupClickAbility_();\n        this.addEmoteMenuToggleAbility_();\n        this.addEmoteMenuDraggableAbility_();\n        this.addEmoteMenuResizableAbility_();\n        this.addStreamIframeAbility_();\n        this.addResizeAbility_();\n        this.addChatterListAbility_();\n        this.addSendMessagesAbility_();\n        this.addNewMessageInfoAbility_();\n    }\n    /**\n     * @private\n     */\n    addEmotesToEmoteMenu_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let userEmotes = this.emoteManager_.getUserEmotes();\n        // Twitch Global/Channel\n        for (let j in userEmotes) {\n            if ({}.hasOwnProperty.call(userEmotes, j)) {\n                let emoteSet = userEmotes[j];\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .emotes')\n                    .prepend('<div class=\"' + j + '\" style=\"width: 100%;\">' +\n                        '<h3>' + j + '</h3></div>');\n                for (let k in emoteSet) {\n                    if ({}.hasOwnProperty.call(emoteSet, k)) {\n                        $('.chatInput[id$=\\'' + channelLC\n                            + '\\'] .emoteMenu .emotes .' + j)\n                            .append('<img ' +\n                                'src=\\'https://static-cdn.jtvnw.net/emoticons/v1/'\n                                + emoteSet[k].id + '/1.0\\' alt=\\''\n                                + emoteSet[k].code + '\\' />');\n                    }\n                }\n            }\n        }\n        // BTTV Global\n        let bttvGlobal = this.emoteManager_.getBttvGlobal();\n        for (let i = 0; i < bttvGlobal.length; i++) {\n            if (bttvGlobal[i].channel == null) {\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .bttvEmotes')\n                    .append('<img src=\"https://cdn.betterttv.net/emote/'\n                        + bttvGlobal[i].id + '/1x\" alt=\"' + bttvGlobal[i].code\n                        + '\" />');\n            }\n        }\n        // FFZ Global\n        let ffzGlobal = this.emoteManager_.getFfzGlobal();\n        for (let j = 0; j < ffzGlobal.default_sets.length; j++) {\n            let emoteSetGlobal = ffzGlobal.default_sets[j];\n            let emotesInSetGlobal = ffzGlobal['sets'][emoteSetGlobal]['emoticons'];\n            for (let k = 0; k < emotesInSetGlobal.length; k++) {\n                // let ffzEmoteName = JSON.stringify(emotesInSetGlobal[k].name);\n\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .ffzEmotes')\n                    .append('<img src=\\'https:' +\n                        emotesInSetGlobal[k]['urls']['1'] + '\\' ' +\n                        'alt=\\'' + emotesInSetGlobal[k].name + '\\' />');\n            }\n        }\n        // BTTV Channel\n        let bttvChannels = this.emoteManager_.getBttvChannels();\n        if (bttvChannels.hasOwnProperty(channelLC)) {\n            for (let j = 0; j < bttvChannels[channelLC].length; j++) {\n                /* let bttvChannelEmote =\n                    JSON.stringify(bttvChannels[channelLC][j].code);*/\n\n                let emoteId = JSON.stringify(bttvChannels[channelLC][j].id)\n                    .substring(1,\n                        JSON.stringify(bttvChannels[channelLC][j].id).length - 1);\n                $('.chatInput[id$=\\'' + channelLC\n                    + '\\'] .emoteMenu .bttvChannelEmotes')\n                    .append('<img src=\\'https://cdn.betterttv.net/emote/' +\n                        emoteId +\n                        '/1x\\' alt=\\'' + bttvChannels[channelLC][j].code + '\\' />');\n            }\n        }\n        // FFZ Channel\n        let ffzChannels = this.emoteManager_.getFfzChannels();\n        if (ffzChannels.hasOwnProperty(channelLC)) {\n            let ffzChannelId = ffzChannels[channelLC]['room']['_id'];\n            if (ffzChannels[channelLC]['sets'][ffzChannelId] != null) {\n                let ffzChannelEmoteSet =\n                    ffzChannels[channelLC]['sets'][ffzChannelId]['emoticons'];\n                for (let j = 0; j < ffzChannelEmoteSet.length; j++) {\n                    /* let ffzChannelEmote =\n                        JSON.stringify(ffzChannelEmoteSet[j].name);*/\n\n                    $('.chatInput[id$=\\'' + channelLC\n                        + '\\'] .emoteMenu .ffzChannelEmotes')\n                        .append('<img src=\\'https:' +\n                            ffzChannelEmoteSet[j]['urls']['1'] + '\\' ' +\n                            'alt=\\'' + ffzChannelEmoteSet[j].name + '\\' />');\n                }\n            }\n        }\n    }\n    /**\n     * @private\n     */\n    addEmoteMenuImgClickAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu img').click(function() {\n            let emoteName = $(this).attr('alt');\n            let inputField = $('.chatInputField[id$=\\'' + channelLC + '\\']');\n            let curValue = inputField.val();\n            let newValue;\n            if (!curValue.endsWith(' ') && curValue.length > 0) {\n                newValue = curValue + ' ' + emoteName + ' ';\n            } else {\n                newValue = curValue + emoteName + ' ';\n            }\n            inputField.val(newValue);\n        });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuGroupClickAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu .emotes h3')\n            .click(/* @this HTMLElement */function() {\n                if ($(this).parent().css('height') === '18px') {\n                    $(this).parent().css({'height': ''});\n                } else {\n                    $(this).parent().css({'height': '18px'});\n                }\n            });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuToggleAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        $('.chatInput[id$=\\'' + channelLC + '\\'] .kappa').click(function() {\n            if ($emoteMenu.is(':hidden')) {\n                $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu').show();\n            } else {\n                $emoteMenu.hide();\n                $emoteMenu.css({\n                    'top': '',\n                    'left': '',\n                    'right': '',\n                    'bottom': '',\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    addEmoteMenuDraggableAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        let chatArea = $('#main-chat-area');\n        $emoteMenu.draggable({\n            containment: chatArea,\n        });\n    }\n    /**\n     * @private\n     */\n    addEmoteMenuResizableAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let $emoteMenu = $('.chatInput[id$=\\'' + channelLC + '\\'] .emoteMenu');\n        $emoteMenu.resizable({\n            handles: 'n, ne, e',\n            minHeight: 200,\n            minWidth: 200,\n        });\n    }\n    /**\n     * @private\n     */\n    addStreamIframeAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $(document).on('click', '.toggleStream[id$=\\'' + channelLC + '\\']',\n            /* @this HTMLElement */function() {\n                if ($(this).parent().parent().find('.chatStream').length) {\n                    $(this).parent().parent().find('.chatStream').remove();\n                    $(this).parent().parent().find('.chatContent')\n                        .css({'height': 'calc(100% - 105px)'});\n                    $(this).parent().parent().find('.chatViewerList')\n                        .css({'height': 'calc(100% - 35px)'});\n                } else {\n                    $(this).parent().parent().prepend(\n                        '<div class=\"chatStream\" id=\"' + channelLC + '\">' +\n                        '<div class=\"chatStreamInner\">' +\n                        '<iframe src=\"https://player.twitch.tv/?channel=' + channelLC\n                        + '\" frameborder=\"0\" allowfullscreen=\"true\"' +\n                        ' scrolling=\"no\" height=\"100%\" width=\"100%\"></iframe>' +\n                        '</div></div>');\n                    $(this).parent().parent().find('.chatContent')\n                        .css({\n                            'height': 'calc(100% - 105px - ' +\n                            $(this).parent().parent()\n                                .find('.chatStream').outerHeight() + 'px )',\n                        });\n                    $(this).parent().parent().find('.chatViewerList')\n                        .css({\n                            'height': 'calc(100% - 35px - ' +\n                            $(this).parent().parent()\n                                .find('.chatStream').outerHeight() + 'px )',\n                        });\n                }\n            });\n    }\n    /**\n     * @private\n     */\n    addResizeAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $(document).on('resize', '.chat[id$=\\'' + channelLC + '\\']', function() {\n            $(this).find('.chatContent')\n                .css({\n                    'height': 'calc(100% - 105px - ' + $(this)\n                        .find('.chatStream').outerHeight() + 'px )',\n                });\n            $(this).find('.chatViewerList')\n                .css({\n                    'height': 'calc(100% - 35px - ' + $(this)\n                        .find('.chatStream').outerHeight() + 'px )',\n                });\n        });\n        $('.chat[id$=\\'' + channelLC + '\\']').resizable({\n            handles: 'e',\n            start: function() {\n                $('iframe').css('pointer-events', 'none');\n            },\n            stop: function() {\n                $('iframe').css('pointer-events', 'auto');\n            },\n        });\n        let contentHeightOld =\n            $('.chatContent[id$=\\'' + channelLC + 'scrollArea\\'] .chatMessageList').height();\n        $('.chat[id$=\\'' + channelLC).resize(function() {\n            let $newMessagesInfo = $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']');\n            let $chatContent = $('#' + channelLC + ' .chatContent');\n            let $chatContentArea = $('.chatContent[id$=\\'' + channelLC + 'contentArea\\']');\n            if ($newMessagesInfo.is(':hidden') && contentHeightOld <= $chatContentArea.height()) {\n                $chatContent.scrollTop($chatContent[0].scrollHeight + 50);\n                contentHeightOld = $chatContentArea.height();\n            }\n            if ($newMessagesInfo.is(':hidden')) {\n                $chatContent.scrollTop($chatContent[0].scrollHeight + 50);\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    addChatterListAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        let toggleVL = 0;\n        $(document).on('click', '.toggleViewerList[id$=\\'' + channelLC + '\\']', function() {\n            // if ($(this).parent().parent().find(\"div.chatViewerList\")\n            // .css(\"display\").toLowerCase() != \"none\") {\n            if (toggleVL % 2 !== 0) {\n                $(this).parent().parent().find('div.chatViewerList').hide();\n                $(this).parent().parent().find('div.chatContent').show();\n                $(this).parent().parent().find('div.chatInput').show();\n            } else {\n                $(this).parent().parent().find('div.chatContent').hide();\n                $(this).parent().parent().find('div.chatInput').hide();\n                $(this).parent().parent().find('div.chatViewerList').show();\n\n                let viewerList =\n                    $(this).parent().parent().find('div.chatViewerList');\n\n                TwitchApi.getChatterList(channelLC, this, function(data) {\n                    viewerList.empty();\n                    data = data.data;\n                    viewerList.append('Chatter Count: ' + data.chatter_count +\n                        '<br /><br />');\n\n                    let chatters = data.chatters;\n                    if (chatters.moderators.length > 0) {\n                        viewerList.append('<h3>Moderators</h3>');\n                        let modList = '<ul>';\n                        for (let i = 0; i < chatters.moderators.length; i++) {\n                            modList += '<li>' + chatters.moderators[i] + '</li>';\n                        }\n                        modList += '</ul><br />';\n                        viewerList.append(modList);\n                    }\n                    if (chatters.staff.length > 0) {\n                        viewerList.append('<h3>Staff</h3>');\n                        let staffList = '<ul>';\n                        for (let i = 0; i < chatters.staff.length; i++) {\n                            staffList += '<li>' + chatters.staff[i] + '</li>';\n                        }\n                        staffList += '</ul><br />';\n                        viewerList.append(staffList);\n                    }\n                    if (chatters.admins.length > 0) {\n                        viewerList.append('<h3>Admins</h3>');\n                        let adminsList = '<ul>';\n                        for (let i = 0; i < chatters.admins.length; i++) {\n                            adminsList += '<li>' + chatters.admins[i] + '</li>';\n                        }\n                        adminsList += '</ul><br />';\n                        viewerList.append(adminsList);\n                    }\n                    if (chatters.global_mods.length > 0) {\n                        viewerList.append('<h3>Global Mods</h3>');\n                        let globalModsList = '<ul>';\n                        for (let i = 0; i < chatters.global_mods.length; i++) {\n                            globalModsList +=\n                                '<li>' + chatters.global_mods[i] + '</li>';\n                        }\n                        globalModsList += '</ul><br />';\n                        viewerList.append(globalModsList);\n                    }\n                    if (chatters.viewers.length > 0) {\n                        viewerList.append('<h3>Viewers</h3>');\n                        let viewersList = '<ul>';\n                        for (let i = 0; i < chatters.viewers.length; i++) {\n                            viewersList += '<li>' + chatters.viewers[i] + '</li>';\n                        }\n                        viewersList += '</ul><br />';\n                        viewerList.append(viewersList);\n                    }\n                });\n            }\n            toggleVL++;\n        });\n    }\n    /**\n     * @private\n     */\n    addSendMessagesAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatInputField[id$=\\'' + channelLC + '\\']').keydown(this, function(event) {\n            if (event.keyCode === 13) {\n                event.preventDefault();\n                if ($(this).val().startsWith('.')\n                    || $(this).val().startsWith('/')) {\n                    event.data.receiveIrcConnection_.send('PRIVMSG #' + channelLC + ' :'\n                        + $(this).val());\n                } else {\n                    event.data.sendIrcConnection_.send('PRIVMSG #' + channelLC\n                        + ' :' + $(this).val());\n                }\n                $(this).val('');\n            } else if (event.keyCode === 9) {\n                event.preventDefault();\n                if ($(this).val().length !== 0 && !$(this).val().endsWith(' ')) {\n                    console.log('WUB');\n                }\n            }\n        });\n    }\n    /**\n     * @private\n     */\n    addNewMessageInfoAbility_() {\n        let channelLC = this.channelName_.toLowerCase();\n        $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').click(function() {\n            $(this).hide();\n            let $chatContent = $('#' + channelLC + ' .chatContent');\n            $chatContent.scrollTop($chatContent[0].scrollHeight);\n        });\n        $('.chatContent[id$=\\'' + channelLC + 'scrollArea\\']').scroll(\n            /* @this HTMLElement */function() {\n                // Bug workaround: unexpected horizontal scrolling\n                // despite overflow-x: hidden\n                if ($(this).scrollLeft() !== 0) {\n                    $(this).scrollLeft(0);\n                }\n                // New messages info scroll behavior\n                if ($(this)[0].scrollHeight - $(this).scrollTop()\n                    < $(this).outerHeight() + 50) {\n                    $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').hide();\n                } else {\n                    $('.chatNewMessagesInfo[id$=\\'' + channelLC + '\\']').show();\n                }\n\n                if ($(this).scrollTop() < 200) {\n                    $('.chatContent[id$=\\'' + channelLC\n                        + 'scrollArea\\'] .chatMessageList')\n                        .children('div:hidden:last').show();\n                }\n            });\n    }\n}\n\nexport default Chat;\n","'use strict';\nimport Chat from './Chat.js';\n// import SimpleBar from '../../public/lib/simplebar.js';\n\n/**\n * Represents the whole application\n */\nclass ChatManager {\n    /**\n     * Creates the ChatManager\n     * @param {EmoteManager} emoteManager\n     * @param {MessageParser} messageParser\n     */\n    constructor(emoteManager, messageParser) {\n        /**\n         * @private\n         * @type {Object.<string, Chat>}\n         */\n        this.chatList_ = {};\n        this.emoteManager_ = emoteManager;\n        this.messageParser_ = messageParser;\n\n        // Bug workaround: unexpected vertical scrolling\n        // despite overflow-y: hidden\n        $('#main-chat-area').scroll(function() {\n            if ($(this).scrollTop() !== 0) {\n                $(this).scrollTop(0);\n            }\n        });\n    }\n\n    /**\n     * Setting the IRC Connection for receiving messages.\n     * @param {ReceiveIRCConnection} receiveIrcConnection\n     */\n    setReceiveIrcConnection(receiveIrcConnection) {\n        this.receiveIrcConnection_= receiveIrcConnection;\n    }\n\n    /**\n     * Setting the IRC Connection for sending messages.\n     * @param {SendIRCConnection} sendIrcConnection\n     */\n    setSendIrcConnection(sendIrcConnection) {\n        this.sendIrcConnection_ = sendIrcConnection;\n    }\n\n    /**\n     * Adds the chat messages to the correct chat\n     * @param {Array.<ChatMessage>} chatMessages\n     */\n    addMessages(chatMessages) {\n        for (let i = 0; i < chatMessages.length; i++) {\n            let chatName = chatMessages[i].getChatName().toLowerCase();\n            this.chatList_[chatName].addMessage(chatMessages[i]);\n        }\n    }\n\n    /**\n     * @param {string} channelName\n     * @return {boolean} true if chat already in the chatList\n     */\n    isChatAlreadyAdded(channelName) {\n        return this.chatList_.hasOwnProperty(channelName);\n    }\n\n    /**\n     * Removes the Chat from the chatList_ and the DOM\n     *\n     * @param {Object} event\n     * @private\n     */\n    removeChat_(event) {\n        let channelName = event.data[1].toLowerCase();\n        let chatManager = event.data[0];\n        delete chatManager.chatList_[channelName];\n        $(document).off('click', '.toggleStream[id$=\\'' + channelName + '\\']');\n        $(this).parent().parent().remove();\n        chatManager.receiveIrcConnection_.leaveChat(channelName);\n        chatManager.sendIrcConnection_.leaveChat(channelName);\n    }\n\n    /**\n     * Creates new Chat and adds it to the chatList_ if there is not already\n     * a chat with this channelName\n     * @param {string} channelName Name of the channel that will be added\n     * @param {string} channelId\n     */\n    addChat(channelName, channelId) {\n        let channelLC = channelName.toLowerCase();\n        if (!this.isChatAlreadyAdded(channelLC) && this.receiveIrcConnection_.isLoaded() &&\n                this.sendIrcConnection_.isLoaded()) {\n            this.chatList_[channelLC] = new Chat(channelName, channelId, this.emoteManager_,\n                this.receiveIrcConnection_, this.sendIrcConnection_, this.messageParser_);\n            let chatArea = $('#main-chat-area');\n            chatArea.append(this.chatList_[channelLC].getHtml());\n            this.chatList_[channelLC].addAbilities();\n\n            this.receiveIrcConnection_.joinChat(channelLC);\n            this.sendIrcConnection_.joinChat(channelLC);\n\n            $(document).on('click', '.removeChat[id$=\\'' + channelLC + '\\']',\n                [this, channelName], this.removeChat_);\n\n            baron('#' + channelLC + 'scrollArea');\n\n            // ToDO: Check if .sortable is needed every time\n            chatArea.sortable({\n                handle: '.chatHeader',\n                start(event, ui) {\n                    ui.placeholder.width(ui.item.width());\n                    ui.placeholder.height(ui.item.height());\n                },\n                animation: 300,\n                cursor: 'move',\n                revert: 200,\n                scroll: true,\n                containment: 'parent',\n            });\n        }\n    }\n}\nexport default ChatManager;\n","'use strict';\nimport ChatMessage from './ChatMessage.js';\n/**\n * Represents one chat message of a chat user\n */\nclass UserMessage extends ChatMessage {\n    /**\n     * @param {string} chatName Name of the chat the message is for\n     * @param {string} content The actual content of the message\n     * @param {array} badges List of badges shown in front of the name\n     * @param {Array.<string>} emotePositions\n     * @param {string} chatterName Name of the chatter the message is from\n     * @param {string} chatterColor The color of the chatters name in hex #xxxxxx\n     * @param {boolean} action\n     * @param {EmoteManager} emoteManager\n     * @param {BadgeManager} badgeManager\n     * @constructor\n     */\n    constructor(chatName, content, badges, emotePositions, chatterName, chatterColor, action,\n                emoteManager, badgeManager) {\n        super(chatName, content);\n        /** @private */\n        this.badges_ = badges;\n        /** @private */\n        this.emotes_ = emotePositions;\n        /** @private */\n        this.chatterName_ = chatterName;\n        /** @private */\n        this.chatterColor_ = chatterColor;\n        /** @private */\n        this.action_ = action;\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.badgeManager_ = badgeManager;\n    }\n\n    /**\n     * @return {string} HTML code\n     */\n    getHtml() {\n        let html = this.replaceTwitchEmotesAndEscapeHtml(this.getContent());\n        html = UserMessage.matchURL_(html);\n        html = this.replaceBttvEmotes(html);\n        html = this.replaceFfzEmotes(html);\n        html = this.replaceBadges(html);\n        return html;\n    }\n\n    /**\n     * Replace Twitch emote texts with img html tag\n     * and simultaneously escape the HTML chars in the msg\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceTwitchEmotesAndEscapeHtml(userMessage) {\n        // Replace emote texts with images\n        if (this.emotes_[0] !== '' && this.emotes_[0] != null) {\n            let sortEmotes = [];\n            for (let j = 0; j < this.emotes_.length; j++) {\n                let emote = this.emotes_[j].split(':');\n                let emoteId = emote[0];\n                let positions = emote[1].split(',');\n\n                for (let k = 0; k < positions.length; k++) {\n                    sortEmotes.push(\n                        [positions[k].split('-')[0],\n                            positions[k].split('-')[1], emoteId]);\n                }\n            }\n            for (let k = 0; k < sortEmotes.length - 1; k++) {\n                for (let l = k + 1; l < sortEmotes.length; l++) {\n                    if (parseInt(sortEmotes[k][0])\n                        > parseInt(sortEmotes[l][0])) {\n                        let zs = sortEmotes[k];\n                        sortEmotes[k] = sortEmotes[l];\n                        sortEmotes[l] = zs;\n                    }\n                }\n            }\n\n            let diff = 0;\n            let oldAfterEmotePos = 0;\n            for (let k = 0; k < sortEmotes.length; k++) {\n                let oldMessage = userMessage;\n\n                let imgString = userMessage.substring(0, oldAfterEmotePos)\n                    + UserMessage.escapeString_(userMessage.substring(oldAfterEmotePos,\n                        parseInt(sortEmotes[k][0]) + diff)) +\n                    '<span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\"https://static-cdn.jtvnw.net/emoticons/v1/'\n                    + sortEmotes[k][2] + '/1.0\" alt=\"{Emote}\" /></span>';\n\n                userMessage = imgString +\n                    userMessage.substring(parseInt(sortEmotes[k][1])\n                        + 1 + diff, userMessage.length);\n                oldAfterEmotePos = imgString.length;\n                // alert(oldAfterEmotePos);\n                // alert(userMessage);\n                diff += userMessage.length - oldMessage.length;\n            }\n        } else {\n            userMessage = UserMessage.escapeString_(userMessage);\n        }\n        return userMessage;\n    }\n\n    /**\n     * Replaces Bttv emote texts with img html tag\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceBttvEmotes(userMessage) {\n        // Replace BTTV Global Emotes with img\n        let bttvGlobal = this.emoteManager_.getBttvGlobal();\n        for (let j = 0; j < bttvGlobal.length; j++) {\n            if (bttvGlobal[j].channel == null) {\n                let find = JSON.stringify(bttvGlobal[j].code);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)' +\n                    find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                let emoteId = JSON.stringify(bttvGlobal[j].id)\n                    .substring(1, JSON.stringify(bttvGlobal[j].id).length - 1);\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https://cdn.betterttv.net/emote/' + emoteId +\n                    '/1x\\' alt=\\'' + bttvGlobal[j].code + '\\' /></span> ');\n            }\n        }\n        // Replace BTTV Channel Emotes with img\n        let bttvChannels = this.emoteManager_.getBttvChannels();\n        if (bttvChannels.hasOwnProperty(this.chatName_)) {\n            for (let j = 0; j < bttvChannels[this.chatName_].length; j++) {\n                let find = JSON.stringify(bttvChannels[this.chatName_][j].code);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)' + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                let emoteId =\n                    JSON.stringify(bttvChannels[this.chatName_][j].id)\n                    .substring(1,\n                        JSON.stringify(\n                            bttvChannels[this.chatName_][j].id).length - 1);\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https://cdn.betterttv.net/emote/' +\n                    emoteId +\n                    '/1x\\' alt=\\'' +\n                    bttvChannels[this.chatName_][j].code + '\\' />' +\n                    '</span> ');\n            }\n        }\n        return userMessage;\n    }\n    /**\n     * Replaces Ffz emote texts with img html tag\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceFfzEmotes(userMessage) {\n        // Replace FFZ Global Emotes with img\n        let ffzGlobal = this.emoteManager_.getFfzGlobal();\n        for (let j = 0; j < ffzGlobal.default_sets.length; j++) {\n            let emoteSetGlobal = ffzGlobal.default_sets[j];\n            let emotesInSetGlobal =\n                ffzGlobal['sets'][emoteSetGlobal]['emoticons'];\n            for (let k = 0; k < emotesInSetGlobal.length; k++) {\n                let find = JSON.stringify(emotesInSetGlobal[k].name);\n                find = find.substring(1, find.length - 1);\n                find = '(^|\\\\b|\\\\s)'\n                    + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n                    + '(?=\\\\s|$)';\n\n                let re = new RegExp(find, 'g');\n\n                userMessage = userMessage.replace(re,\n                    ' <span style=\" display: inline-block;\" >&#x200b;' +\n                    '<img src=\\'https:' + emotesInSetGlobal[k]['urls']['1']\n                    + '\\' alt=\\'' + emotesInSetGlobal[k].name + '\\' />' +\n                    '</span> ');\n            }\n        }\n        // Replace FFZ Channel Emotes with img\n        let ffzChannels = this.emoteManager_.getFfzChannels();\n        if (ffzChannels.hasOwnProperty(this.chatName_)) {\n            let ffzChannelId = ffzChannels[this.chatName_]['room']['_id'];\n            if (ffzChannels[this.chatName_]['sets'][ffzChannelId] != null) {\n                let ffzChannelEmoteSet =\n                    ffzChannels[this.chatName_]['sets'][ffzChannelId]['emoticons'];\n                for (let j = 0; j < ffzChannelEmoteSet.length; j++) {\n                    let find = JSON.stringify(ffzChannelEmoteSet[j].name);\n                    find = find.substring(1, find.length - 1);\n                    find = '(^|\\\\b|\\\\s)'\n                        + find.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n                        + '(?=\\\\s|$)';\n\n                    let re = new RegExp(find, 'g');\n\n                    userMessage = userMessage.replace(re,\n                        ' <span style=\" display: inline-block;\" >&#x200b;' +\n                        '<img src=\\'https:' + ffzChannelEmoteSet[j]['urls']['1']\n                        + '\\' alt=\\'' + ffzChannelEmoteSet[j].name + '\\' />' +\n                        '</span> ');\n                }\n            }\n        }\n        return userMessage;\n    }\n\n    /**\n     * Puts badges img tags in the message\n     * @param {string} userMessage\n     * @return {string}\n     */\n    replaceBadges(userMessage) {\n        let newElement;\n        if (this.action_) {\n            newElement = $('<li><span style=\"color: gray;font-size: 11px;\">'\n                + this.getTimestamp() + '</span><span style=\"color: ' + this.chatterColor_\n                + ';font-weight: bold;\"> ' + this.chatterName_ + '</span>' +\n                ' <span style=\"color: ' + this.chatterColor_ + ';\">'\n                + userMessage + '</span></li>');\n        } else {\n            newElement = $('<li><span style=\"color: gray;font-size: 11px;\">'\n                + this.getTimestamp() + '</span><span style=\"color: ' + this.chatterColor_\n                + ';font-weight: bold;\"> ' + this.chatterName_ + '</span>: '\n                + userMessage + '</li>');\n        }\n\n        // Put badges in message\n        for (let j = 0; j < this.badges_.length; j++) {\n            let badge = this.badges_[j].split('/');\n            let badgeGroup = this.badgeManager_.getBadgesChannels()[this.chatName_][badge[0]];\n            if (badge[0].localeCompare('subscriber') === 0) {\n                newElement.find('span:nth-of-type(2):first').before(\n                    '<div style=\" display: inline-block;' +\n                    'vertical-align: -32%;border-radius: 2px;' +\n                    'background-image: url(' +\n                    badgeGroup['versions'][badge[1]]['image_url_1x']\n                    + ');\" ></div>');\n            } else {\n                newElement.find('span:nth-of-type(2):first').before(\n                    '<div style=\" display: inline-block;' +\n                    'vertical-align: -32%;border-radius: 2px;' +\n                    'background-image: url(' +\n                    this.badgeManager_\n                        .getBadgesGlobal()[badge[0]]['versions'][badge[1]]['image_url_1x']\n                    + ');\"></div>');\n            }\n        }\n        return newElement;\n    }\n\n    /**\n     * Searches for URLs in the given String and replaces them with the\n     * proper <a href=\"\"> HTML Tag\n     * @param {string} txt - Text in which the links get searched\n     * @return {string} Text with <a href=\"\"> HTML Tags\n     * @private\n     */\n    static matchURL_(txt) {\n        let pattern =\n            /((^|\\s|&#32;)(http(s)?:\\/\\/.)?(www\\.)?([-a-zA-Z0-9@:%_+~#=]|\\.(?!\\.)){2,256}\\.[a-z]{2,8}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*))(?=(\\s|$|&#32;))/g;\n        txt = txt.replace(pattern, function(str, p1) {\n            let addScheme = p1.indexOf('http://') === -1\n                && p1.indexOf('https://') === -1;\n            let link = ' <a href=\"'\n                + (addScheme ? 'http://' : '')\n                + p1 + '\" target=\"_blank\">' + p1 + '</a>';\n            if (p1.startsWith(' ')) {\n                link = ' <a href=\"'\n                    + (addScheme ? 'http://' : '') +\n                    p1.substring(1, p1.length) + '\" target=\"_blank\">' + p1 + '</a>';\n            } else if (p1.startsWith('&#32;')) {\n                link = ' <a href=\"'\n                    + (addScheme ? 'http://' : '') +\n                    p1.substring(5, p1.length) + '\" target=\"_blank\">' + p1 + '</a>';\n            }\n            return link;\n        });\n        return txt;\n    }\n\n    /**\n     * Escape HTML characters in the message before adding to the chat\n     * @param {string} txt message to escape\n     * @return {string} escaped message\n     * @private\n     */\n    static escapeString_(txt) {\n        return txt.replace(/&/g, '&amp;').replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n            .replace(/`/g, '&#96;').replace(/!/g, '&#33;')\n            .replace(/@/g, '&#64;').replace(/\\$/g, '&#36;')\n            .replace(/%/g, '&#37;').replace(/=/g, '&#61;')\n            .replace(/\\+/g, '&#43;').replace(/{/g, '&#123;')\n            .replace(/}/g, '&#125;').replace(/\\[/g, '&#91;')\n            .replace(/]/g, '&#93;');\n    }\n}\nexport default UserMessage;\n","'use strict';\n\n/**\n * Manages the name color for chatters who never set their name color\n */\nexport default {\n    userColors_: {},\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    getUserColors() {\n        return this.userColors_;\n    },\n\n    /**\n     * @param {string} username\n     * @param {string} color hex #xxxxxx\n     */\n    addUserColor(username, color) {\n        this.userColors_[username] = color;\n    },\n\n    /**\n     * Returns a random color of the Twitch standard name colors\n     * @return {string} Random color as hex #xxxxxx\n     */\n    randomColor() {\n        let colorChoices = [\n            '#ff0000', '#ff4500',\n            '#ff69b4', '#0000ff',\n            '#2e8b57', '#8a2be2',\n            '#008000', '#daa520',\n            '#00ff7f', '#b22222',\n            '#d2691e', '#ff7f50',\n            '#5f9ea0', '#9acd32',\n            '#1e90ff',\n        ];\n        let randomNumber = Math.floor(Math.random() * colorChoices.length);\n        return colorChoices[randomNumber];\n    },\n\n    /**\n     * Does correct the name color for dark backgrounds, so they are better readable\n     * @param {string} hexColor to be corrected as #xxxxxx hex value\n     * @return {string} corrected color as #xxxxxx hex value\n     */\n    colorCorrection(hexColor) {\n        // Color contrast correction\n        let rgbColor = this.hex2rgb_(hexColor);\n        let yiqColor = this.rgb2yiq_(rgbColor.r, rgbColor.g, rgbColor.b);\n        while (yiqColor.y < 0.5) {\n            rgbColor = this.yiq2rgb_(yiqColor.y, yiqColor.i, yiqColor.q);\n            let hslColor = this.rgb2hsl_(rgbColor.r, rgbColor.g, rgbColor.b);\n            hslColor.l = Math.min(Math.max(0, 0.1 + 0.9 * hslColor.l), 1);\n            rgbColor = this.hsl2rgb_(hslColor.h, hslColor.s, hslColor.l);\n            yiqColor = this.rgb2yiq_(rgbColor.r, rgbColor.g, rgbColor.b);\n        }\n        rgbColor = this.yiq2rgb_(yiqColor.y, yiqColor.i, yiqColor.q);\n        hexColor = this.rgb2hex_(rgbColor.r, rgbColor.g, rgbColor.b);\n        return hexColor.substring(0, 7);\n    },\n\n    /**\n     * Converts (r,g,b) to #xxxxxx hex color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {string} color as #xxxxxx hex value\n     * @private\n     */\n    rgb2hex_(r, g, b) {\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n    },\n\n    /**\n     * Converts a #xxxxxx hex color to a rgb color\n     * @param {string} hex color as #xxxxxx hex value\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    hex2rgb_(hex) {\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        } : null;\n    },\n\n    /**\n     * Converts a rgb color to a yiq color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {{y: number, i: number, q: number}} y, i and q between 0.0 and 1.0\n     * @private\n     */\n    rgb2yiq_(r, g, b) {\n        // matrix transform\n        let y = ((0.299 * r) + (0.587 * g) + (0.114 * b)) / 255;\n        let i = ((0.596 * r) + (-0.275 * g) + (-0.321 * b)) / 255;\n        let q = ((0.212 * r) + (-0.523 * g) + (0.311 * b)) / 255;\n        return {\n            y: y,\n            i: i,\n            q: q,\n        };\n    },\n\n    /**\n     * Converts a yiq color to a rgb color\n     * @param {number} y luma 0.0-1.0\n     * @param {number} i first chrominance 0.0-1.0\n     * @param {number} q second chrominance 0.0-1.0\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    yiq2rgb_(y, i, q) {\n        // matrix transform\n        let r = (y + (0.956 * i) + (0.621 * q)) * 255;\n        let g = (y + (-0.272 * i) + (-0.647 * q)) * 255;\n        let b = (y + (-1.105 * i) + (1.702 * q)) * 255;\n        // bounds-checking\n        if (r < 0) {\n            r = 0;\n        } else if (r > 255) {\n            r = 255;\n        }\n        if (g < 0) {\n            g = 0;\n        } else if (g > 255) {\n            g = 255;\n        }\n        if (b < 0) {\n            b = 0;\n        } else if (b > 255) {\n            b = 255;\n        }\n        return {\n            r: r,\n            g: g,\n            b: b,\n        };\n    },\n\n    /**\n     * Converts a rgb color to a hsl color\n     * @param {number} r red 0-255\n     * @param {number} g green 0-255\n     * @param {number} b blue 0-255\n     * @return {{h: number, s: number, l: number}} h: 0-360, s: 0.0-1.0, l: 0.0-1.0\n     * @private\n     */\n    rgb2hsl_(r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        let max = Math.max(r, g, b);\n        let min = Math.min(r, g, b);\n        let h = (max + min) / 2;\n        let s = (max + min) / 2;\n        let l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0; // achromatic\n        } else {\n            let d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n\n            h /= 6;\n        }\n\n        return {\n            h: h*360,\n            s: s,\n            l: l,\n        };\n    },\n\n    /**\n     * Converts an hsl color to a rgb color\n     * @param {number} h hue 0-360\n     * @param {number} s saturation 0.0-1.0\n     * @param {number} l lightness 0.0-1.0\n     * @return {{r: number, g: number, b: number}} r, g, b: 0-255\n     * @private\n     */\n    hsl2rgb_(h, s, l) {\n        // based on algorithm from http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n        if ( h === undefined ) {\n            return {\n                r: 0,\n                g: 0,\n                b: 0,\n            };\n        }\n\n        let chroma = (1 - Math.abs((2 * l) - 1)) * s;\n        let huePrime = h / 60;\n        let secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n        huePrime = Math.floor(huePrime);\n        let red;\n        let green;\n        let blue;\n\n        if ( huePrime === 0 ) {\n            red = chroma;\n            green = secondComponent;\n            blue = 0;\n        } else if ( huePrime === 1 ) {\n            red = secondComponent;\n            green = chroma;\n            blue = 0;\n        } else if ( huePrime === 2 ) {\n            red = 0;\n            green = chroma;\n            blue = secondComponent;\n        } else if ( huePrime === 3 ) {\n            red = 0;\n            green = secondComponent;\n            blue = chroma;\n        } else if ( huePrime === 4 ) {\n            red = secondComponent;\n            green = 0;\n            blue = chroma;\n        } else if ( huePrime === 5 ) {\n            red = chroma;\n            green = 0;\n            blue = secondComponent;\n        }\n\n        let lightnessAdjustment = l - (chroma / 2);\n        red += lightnessAdjustment;\n        green += lightnessAdjustment;\n        blue += lightnessAdjustment;\n\n        return {\n            r: Math.round(red * 255),\n            g: Math.round(green * 255),\n            b: Math.round(blue * 255),\n        };\n    },\n};\n\n","/**\n * @param data\n * @param data.getUsers\n * @param data.getUsers.display_name\n * @param data.logo\n * @param ffzGlobal.default_sets\n * @param data.chatter_count\n * @param data.chatters\n * @param chatters.moderators\n * @param chatters.viewers\n * @param chatters.global_mods\n * @param chatters.admins\n * @param chatters.staff\n */\n\n\n'use strict';\n\nimport ChatMessage from './ChatMessage.js';\nimport RoomStateMessage from './RoomStateMessage.js';\nimport UserMessage from './UserMessage.js';\nimport NameColorManager from './NameColorManager.js';\n\n/**\n * Parser for parsing IRC messages sent by Twitch\n */\nclass MessageParser {\n    /**\n     * @param {EmoteManager} emoteManager\n     * @param {BadgeManager} badgeManager\n     * @constructor\n     */\n    constructor(emoteManager, badgeManager) {\n        /** @private */\n        this.emoteManager_ = emoteManager;\n        /** @private */\n        this.badgeManager_ = badgeManager;\n    }\n\n    /**\n     * Parses an IRC message from Twitch and appends it to the corresponding chat.\n     *\n     * @param {string} msg Single raw chat message sent by Twitch\n     * @return {Array.<ChatMessage>} Array of ChatMessage and UserMessage\n     */\n    parseMessage(msg) {\n        let msgParts = msg.split(' ');\n\n        let chatName = MessageParser.parseChatName_(msgParts);\n\n        if (msgParts[2].localeCompare('WHISPER') === 0) {\n            // ToDo: Implement whisper\n            return [];\n        } else if (msgParts[2].startsWith('GLOBALUSERSTATE')) {\n            return [];\n        } else if (chatName.length < 1) {\n            // console.log('Message with no Chat specified: ' + msg);\n            return [];\n        }\n        /** @type {Array.<ChatMessage>} */\n        let chatMessages = [];\n        if (msgParts[1].localeCompare('JOIN') === 0) {\n            // Ignore JOINs (a user joined a channel)\n        } else if (msgParts[1].localeCompare('PART') === 0) {\n            // Ignore PARTs (a user left a channel)\n        } else if (msgParts[1].localeCompare('353') === 0) {\n            // Ignore name list\n        } else if (msgParts[1].localeCompare('366') === 0) {\n            // Ignore end of name list\n        } else if (msgParts[1].localeCompare('MODE') === 0) {\n            // Ignore gain/lose of Moderator rights\n        } else if (msgParts[2].localeCompare('ROOMSTATE') === 0) {\n            chatMessages = MessageParser.parseRoomState_(msg, chatName);\n        } else if (msgParts[2].localeCompare('USERSTATE') === 0) {\n            // Ignore user state\n        } else if (msgParts[2].localeCompare('USERNOTICE') === 0) {\n            chatMessages = this.parseUserNotice_(msg, chatName);\n        } else if (msgParts[2].localeCompare('CLEARCHAT') === 0) {\n            // ToDo: Bans/Timeouts\n        } else if (msgParts[1].localeCompare('HOSTTARGET') === 0) {\n            // Ignore hosting message\n        } else if (msgParts[2].localeCompare('NOTICE') === 0\n            || msgParts[1].localeCompare('PRIVMSG') === 0) {\n            chatMessages = MessageParser.parseNotice_(msgParts, chatName);\n        } else if (msgParts[2].localeCompare('PRIVMSG') === 0) {\n            chatMessages = this.parsePrivmsg_(msgParts, chatName);\n        } else if (chatName.length >= 1) {\n            chatMessages = [new ChatMessage(chatName, msg)];\n        } else {\n            alert('Error');\n        }\n        return chatMessages;\n    }\n\n    /**\n     * @param {Array} msgParts\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     */\n    parsePrivmsg_(msgParts, chatName) {\n        let username = msgParts[1].split('!', 1);\n        username = username[0].substring(1, username[0].length);\n\n        let metaInfoRaw = msgParts[0].substring(1, msgParts[0].length);\n        let metaInfo = MessageParser.getMetaInfoWithColor_(metaInfoRaw.split(';'), username);\n        if (metaInfo.username != null) {\n            username = metaInfo.username;\n        }\n\n        let userMessage = msgParts.slice(4).join(' ');\n        userMessage = userMessage.substring(1, userMessage.length);\n\n        let action = false;\n        if (userMessage.startsWith('\\x01ACTION')) {\n            action = true;\n            userMessage = userMessage.substring(8, userMessage.length - 2);\n        }\n        let messageContent = userMessage;\n        let emotePositions = metaInfo.emotes;\n        let badges = metaInfo.badges;\n        let color = metaInfo.color;\n        return [\n            new UserMessage(chatName, messageContent, badges,\n                emotePositions, username, color, action, this.emoteManager_, this.badgeManager_),\n        ];\n    }\n\n    /**\n     * @param {string} msg ROOMSTATE message\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    static parseRoomState_(msg, chatName) {\n        let roomStateMsg = msg.split(' ')[0];\n        roomStateMsg = roomStateMsg.substring(1, roomStateMsg.length);\n        let roomStates = roomStateMsg.split(';');\n        let infoMessage = '';\n        let chatInput = $('#' + chatName + ' .chatInput');\n        chatInput.find('p').remove();\n        for (let j = 0; j < roomStates.length; j++) {\n            let info = roomStates[j].split('=');\n            let infoKeyword = info[0];\n            switch (infoKeyword) {\n                case 'broadcaster-lang':\n                    infoMessage += info[1] + '  ';\n                    break;\n                case 'emote-only':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'EMOTE-ONLY  ';\n                    }\n                    break;\n                case 'followers-only':\n                    if (info[1].localeCompare('-1') !== 0) {\n                        infoMessage += 'FOLLOW ' + info[1] + 'm  ';\n                    }\n                    break;\n                case 'r9k':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'R9K  ';\n                    }\n                    break;\n                case 'slow':\n                    if (info[1].localeCompare('0') !== 0) {\n                        infoMessage += 'SLOW ' + info[1] + 's  ';\n                    }\n                    break;\n                case 'subs-only':\n                    if (info[1].localeCompare('1') === 0) {\n                        infoMessage += 'SUB  ';\n                    }\n                    break;\n            }\n        }\n        return [new RoomStateMessage(chatName, infoMessage)];\n    }\n\n    /**\n     * @param {string} msg USERNOTICE message\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    parseUserNotice_(msg, chatName) {\n        let userNoticeMessageParts = msg.split(' ');\n        let userNoticeMessage = userNoticeMessageParts.slice(4).join(' ');\n        let metaInfoRaw = msg.substring(1, msg.length).split(' ')[0].split(';');\n        let metaInfo = MessageParser.getMetaInfo_(metaInfoRaw);\n        let chatMessages = [];\n        chatMessages.push(new ChatMessage(chatName,\n            ((metaInfo.systemMsg != null) ? (metaInfo.systemMsg + ' ') : '')));\n        if (userNoticeMessage.length > 0) {\n            chatMessages.push(this.parseMessage(msg.split(' ')[0] + ' :' +\n                metaInfo.username.toLowerCase() + '!' +\n                metaInfo.username.toLowerCase() + '@' +\n                metaInfo.username.toLowerCase() + '.tmi.twitch.tv PRIVMSG #'\n                + chatName + ' ' + userNoticeMessage)[0]);\n        }\n        return chatMessages;\n    }\n\n    /**\n     * @param {Array.<string>} msgParts\n     * @param {string} chatName channel the ROOMSTATE belongs to\n     * @return {Array.<ChatMessage>} newMessages\n     * @private\n     */\n    static parseNotice_(msgParts, chatName) {\n        let slicePoint = msgParts[2].localeCompare('NOTICE') === 0 ? 4 : 3;\n        let noticeMessage = msgParts.slice(slicePoint).join(' ');\n        return [new ChatMessage(chatName, noticeMessage.substring(1, noticeMessage.length))];\n    }\n\n    /**\n     * @param {Array.<string>} msgParts\n     * @return {string} chatName the message belongs to\n     * @private\n     */\n    static parseChatName_(msgParts) {\n        let chatName = '';\n        // Parse chat channel name the message is for\n        for (let j = 0; j < msgParts.length; j++) {\n            if (msgParts[j].startsWith('#')) {\n                chatName = msgParts[j].slice(1, msgParts[j].length);\n                chatName = chatName.trim();\n                break;\n            }\n        }\n        return chatName;\n    }\n\n    /**\n     * Parses the meta information part of a chat message.\n     *\n     * @param {string[]} metaMsg [{@badges=<badges>},{color=<color>},...]\n     * @param {string} username user from whom the message was sent\n     * @return {Object} Object with one property for every meta information\n     * @private\n     */\n    static getMetaInfoWithColor_(metaMsg, username) {\n        let metaInfo = {};\n\n        metaInfo.color = '#acacbf';\n        metaInfo.emotes = '';\n        metaInfo.badges = '';\n\n        let gotColor = false;\n        for (let j = 0; j < metaMsg.length; j++) {\n            let info = metaMsg[j].split('=');\n            if (info.length <= 1 || info[1].localeCompare('') === 0) {\n                continue;\n            }\n\n            if (info[0].localeCompare('color') === 0) {\n                metaInfo.color = info[1];\n                if (metaInfo.color.localeCompare('') === 0\n                    && !(NameColorManager.getUserColors().hasOwnProperty(username))) {\n                    metaInfo.color = NameColorManager.randomColor();\n                    NameColorManager.addUserColor(username, metaInfo.color);\n                } else if (metaInfo.color.localeCompare('') === 0\n                    && NameColorManager.getUserColors().hasOwnProperty(username)) {\n                    metaInfo.color = NameColorManager.getUserColors()[username];\n                }\n                gotColor = true;\n            } else if (info[0].localeCompare('display-name') === 0) {\n                metaInfo.username = info[1];\n            } else if (info[0].localeCompare('emotes') === 0) {\n                metaInfo.emotes = info[1].split('/');\n            } else if (info[0].localeCompare('badges') === 0) {\n                metaInfo.badges = info[1].split(',');\n            } else if (info[0].localeCompare('system-msg') === 0) {\n                metaInfo.systemMsg = info[1].replace(/\\\\s/g, ' ');\n            } else if (info[0].localeCompare('emote-sets') === 0) {\n                metaInfo.emoteSets = info[1].split(',');\n            }\n        }\n\n        if (!gotColor) {\n            if (NameColorManager.getUserColors().hasOwnProperty(username)) {\n                metaInfo.color = NameColorManager.getUserColors()[username];\n            } else {\n                metaInfo.color = NameColorManager.randomColor();\n                NameColorManager.addUserColor(username, metaInfo.color);\n            }\n        }\n\n        // Color contrast correction\n        metaInfo.color = NameColorManager.colorCorrection(metaInfo.color);\n\n        return metaInfo;\n    }\n\n    /**\n     * Parses the meta information part of a chat message.\n     *\n     * @param {string[]} metaMsg [{@badges=<badges>},{color=<color>},...]\n     * @return {Object} Object with one property for every meta information\n     * @private\n     */\n    static getMetaInfo_(metaMsg) {\n        let metaInfo = {};\n\n        metaInfo.emotes = '';\n        metaInfo.badges = '';\n\n        for (let j = 0; j < metaMsg.length; j++) {\n            let info = metaMsg[j].split('=');\n            if (info.length <= 1 || info[1].localeCompare('') === 0) {\n                continue;\n            }\n\n            if (info[0].localeCompare('display-name') === 0) {\n                metaInfo.username = info[1];\n            } else if (info[0].localeCompare('emotes') === 0) {\n                metaInfo.emotes = info[1].split('/');\n            } else if (info[0].localeCompare('badges') === 0) {\n                metaInfo.badges = info[1].split(',');\n            } else if (info[0].localeCompare('system-msg') === 0) {\n                metaInfo.systemMsg = info[1].replace(/\\\\s/g, ' ');\n            } else if (info[0].localeCompare('emote-sets') === 0) {\n                metaInfo.emoteSets = info[1].split(',');\n            }\n        }\n        return metaInfo;\n    }\n}\nexport default MessageParser;\n","'use strict';\nimport App from './app/App.js';\nimport TwitchConstants from './app/TwitchConstants.js';\n\nlet url = window.location.href;\nlet urlMainAndTail = url.split('#');\nlet urlTailParts;\n\nif (urlMainAndTail.length > 1) {\n    urlTailParts = urlMainAndTail[1].split('&');\n    localStorage.accessToken = urlTailParts[0].split('=')[1];\n} else if (localStorage.getItem('accessToken') !== null) {\n} else {\n    window.location.replace(TwitchConstants.AUTHORIZE_URL);\n}\n\n$(function() { // this will be called when the DOM is ready\n    new App();\n});\n\n\n","/**\n * @param data.emoticon_sets\n * @param data.badge_sets\n */\n\n\n'use strict';\nimport AppUser from './AppUser.js';\nimport {version} from '../../package.json';\nimport SendIRCConnection from './SendIRCConnection.js';\nimport ReceiveIRCConnection from './ReceiveIRCConnection.js';\nimport BadgeManager from './BadgeManager.js';\nimport EmoteManager from './EmoteManager.js';\nimport FavoritesList from './FavoritesList.js';\nimport ChatManager from './ChatManager.js';\nimport MessageParser from './MessageParser.js';\n\n/**\n * Represents the whole application\n */\nclass App {\n    /**\n     * Created the whole application\n     * @constructor\n     */\n    constructor() {\n        // noinspection JSIgnoredPromiseFromCall\n        this.createApp();\n    }\n\n    /**\n     * Create the app\n     */\n    async createApp() {\n        document.title += ` ${version}`;\n        /** @private */\n        this.appUser_ = new AppUser();\n        await this.appUser_.requestAppUserData();\n        /** @private */\n        this.badgeManager_ = new BadgeManager();\n        /** @private */\n        this.emoteManager_ = new EmoteManager(this.appUser_);\n        /** @private */\n        this.messageParser_ =\n            new MessageParser(this.emoteManager_, this.badgeManager_);\n        /** @private */\n        this.chatManager_ = new ChatManager(this.emoteManager_, this.messageParser_);\n        /** @private */\n        new FavoritesList(this.badgeManager_, this.emoteManager_, this.chatManager_);\n        /** @private */\n        this.sendIrcConnection_ = new SendIRCConnection(this.appUser_);\n        /** @private */\n        this.receiveIrcConnection_ = new ReceiveIRCConnection(this.appUser_,\n            this.messageParser_, this.chatManager_);\n        this.chatManager_.setReceiveIrcConnection(this.receiveIrcConnection_);\n        this.chatManager_.setSendIrcConnection(this.sendIrcConnection_);\n    }\n}\n\nexport default App;\n"],"names":["TwitchConstants","CLIENT_ID","PERMISSION_SCOPE","SELF_URL","AUTHORIZE_URL","GLOBAL_BADGES_API_URL","WEBSOCKET_URL","TwitchApi","[object Object]","users","context","callback","$","ajax","url","dataType","headers","Client-ID","data","login","async","done","statusCode","401","window","location","replace","Authorization","localStorage","accessToken","chatName","Accept","chatId","type","AppUser","this","userName_","userNameLC_","userId_","getUserFromOAuth","then","console","log","toLowerCase","user_id","alert","TwitchIRCConnection","appUser","appUser_","TypeError","isLoaded_","connection_","WebSocket","onopen","onOpen_","bind","onerror","onError_","send","getUserName","error","event","message","SendIRCConnection","super","onmessage","onMessage_","messages","split","i","length","msg","startsWith","ReceiveIRCConnection","messageParser","chatManager","messageParser_","chatManager_","chatMessages","parseMessage","addMessages","BadgeManager","badgesChannels_","badgesGlobal_","downloadGlobalBadges_","badge_sets","channelLC","channelId","EmoteManager","userEmotes_","bttvChannels_","bttvGlobal_","ffzChannels_","ffzGlobal_","downloadGlobalEmotes_","getUserId","emoticon_sets","emotes","downloadFfzChannelEmotes_","downloadBttvChannelEmotes_","xhr","status","FavoritesList","badgeManager","emoteManager","isVisible_","badgeManager_","emoteManager_","click","addFavToList","keydown","keyCode","document","getElementById","addEventListener","toggleFavList","loadFavoritesFromLocalStorage_","channelsArray","JSON","parse","getItem","channels","splice","setItem","stringify","err","style","display","css","width","backgroundImage","channelArray","value","isArray","channelsCount","getUsers","notExistingChannelsCount","_total","channel","display_name","id","profilePicURL","profile_image_url","placeholder","addFavLine_","showChannelDoesNotExistInfo_","queue","next","info","attr","delay","downloadChannelBadges","downloadChannelEmotes","favList","append","on","addChat","parent","remove","removeChannelFromLocalStorage_","sortable","axis","animation","cursor","revert","scroll","containment","storeChannelInLocalStorage_","channelName","index","indexOf","push","ChatMessage","content","chatName_","timestamp_","getCurrentTimeFormatted_","content_","trim","time","currentDate","Date","getHours","getMinutes","RoomStateMessage","getContent","Chat","receiveIrcConnection","sendIrcConnection","channelName_","channelId_","channelNameLC_","receiveIrcConnection_","sendIrcConnection_","messageCount_","containerCount_","MESSAGE_LIMIT_","MESSAGES_IN_CONTAINER_","loadRecentMessages_","chatMessage","getChatName","getHtml","chatMessageList","children","limitMessages_","hideNotVisibleMessages","correctScrollPosition_","getRecentMessages","recentMessages","j","addMessage","isScrolledToBottom","slice","hide","bottom","chatContent","scrollHeight","scrollTop","outerHeight","contentHeight","find","imagesLoaded","setTimeout","is","addEmotesToEmoteMenu_","addEmoteMenuImgClickAbility_","addEmoteMenuGroupClickAbility_","addEmoteMenuToggleAbility_","addEmoteMenuDraggableAbility_","addEmoteMenuResizableAbility_","addStreamIframeAbility_","addResizeAbility_","addChatterListAbility_","addSendMessagesAbility_","addNewMessageInfoAbility_","userEmotes","getUserEmotes","hasOwnProperty","call","emoteSet","prepend","k","code","bttvGlobal","getBttvGlobal","ffzGlobal","getFfzGlobal","default_sets","emoteSetGlobal","emotesInSetGlobal","name","bttvChannels","getBttvChannels","emoteId","substring","ffzChannels","getFfzChannels","ffzChannelId","ffzChannelEmoteSet","newValue","emoteName","inputField","curValue","val","endsWith","height","$emoteMenu","show","top","left","right","chatArea","draggable","resizable","handles","minHeight","minWidth","start","stop","contentHeightOld","resize","$newMessagesInfo","$chatContent","$chatContentArea","toggleVL","viewerList","getChatterList","empty","chatter_count","chatters","moderators","modList","staff","staffList","admins","adminsList","global_mods","globalModsList","viewers","viewersList","preventDefault","scrollLeft","ChatManager","chatList_","off","leaveChat","isChatAlreadyAdded","isLoaded","addAbilities","joinChat","removeChat_","baron","handle","ui","item","UserMessage","badges","emotePositions","chatterName","chatterColor","action","badges_","emotes_","chatterName_","chatterColor_","action_","html","replaceTwitchEmotesAndEscapeHtml","matchURL_","replaceBttvEmotes","replaceFfzEmotes","replaceBadges","userMessage","sortEmotes","emote","positions","l","parseInt","zs","diff","oldAfterEmotePos","oldMessage","imgString","escapeString_","re","RegExp","newElement","getTimestamp","badge","badgeGroup","getBadgesChannels","localeCompare","before","getBadgesGlobal","txt","str","p1","addScheme","link","userColors_","username","color","colorChoices","Math","floor","random","hexColor","rgbColor","hex2rgb_","yiqColor","rgb2yiq_","r","g","b","y","yiq2rgb_","q","hslColor","rgb2hsl_","min","max","hsl2rgb_","h","s","rgb2hex_","toString","hex","result","exec","d","undefined","red","green","blue","chroma","abs","huePrime","secondComponent","lightnessAdjustment","round","MessageParser","msgParts","parseChatName_","parseRoomState_","parseUserNotice_","parseNotice_","parsePrivmsg_","metaInfoRaw","metaInfo","getMetaInfoWithColor_","join","messageContent","roomStateMsg","roomStates","infoMessage","userNoticeMessage","getMetaInfo_","systemMsg","slicePoint","noticeMessage","metaMsg","gotColor","NameColorManager","getUserColors","randomColor","addUserColor","emoteSets","colorCorrection","urlTailParts","urlMainAndTail","href","createApp","title","version","requestAppUserData","setReceiveIrcConnection","setSendIrcConnection"],"mappings":"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"}